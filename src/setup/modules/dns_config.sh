#!/bin/bash
# Module: dns_light.sh
# Goal: Set sane DNS on desktops/VMs without breaking network managers or reboot flow.

# ---------- Common + fallbacks ----------
source "/usr/lib/hardn-xdr/src/setup/hardn-common.sh" 2>/dev/null || \
source "$(dirname "$(dirname "$(realpath "${BASH_SOURCE[0]}")")")/hardn-common.sh" 2>/dev/null || {
  HARDN_STATUS(){ echo "$(date '+%F %T') - [$1] $2"; }
  check_root(){ [[ $EUID -eq 0 ]]; }
  is_container_environment(){ [[ -n "$CI" || -n "$GITHUB_ACTIONS" || -f /.dockerenv || -f /run/.containerenv ]] || grep -qa container /proc/1/environ 2>/dev/null; }
  hardn_module_exit(){ exit "${1:-0}"; }
}
type safe_systemctl >/dev/null 2>&1 || \
safe_systemctl(){ timeout 15 systemctl "$@" >/dev/null 2>&1; }

if ! check_root; then
  HARDN_STATUS "error" "Root privileges required for DNS configuration"
  hardn_module_exit 1
fi

# ---------- Light defaults ----------
selected_provider="Cloudflare"
primary_dns="1.1.1.1"
secondary_dns="1.0.0.1"
resolv_conf="/etc/resolv.conf"

HARDN_STATUS "info" "Configuring DNS (light mode) → $selected_provider: $primary_dns, $secondary_dns"

# ---------- Container guard ----------
if is_container_environment; then
  HARDN_STATUS "info" "Container detected. Skipping: DNS is usually injected by the runtime."
  return 0 2>/dev/null || hardn_module_exit 0
fi

changes_made=false

# ---------- Path 1: systemd-resolved (preferred, desktop-safe) ----------
if safe_systemctl is-active systemd-resolved --quiet; then
  HARDN_STATUS "info" "systemd-resolved is active; using drop-in config."
  install -d -m 0755 /etc/systemd/resolved.conf.d
  dropin="/etc/systemd/resolved.conf.d/10-hardn-dns.conf"

  # Generate desired content
  desired=$(cat <<EOF
[Resolve]
DNS=$primary_dns $secondary_dns
FallbackDNS=$secondary_dns $primary_dns
DNSSEC=allow-downgrade
EOF
)

  # Write only if changed
  if [[ ! -f "$dropin" ]] || ! cmp -s <(echo "$desired") "$dropin"; then
    printf "%s\n" "$desired" > "$dropin"
    chmod 0644 "$dropin"
    changes_made=true
    # Try a lightweight reload; if it fails, do nothing (don’t bounce interfaces)
    safe_systemctl reload systemd-resolved || true
    HARDN_STATUS "pass" "Set DNS via systemd-resolved drop-in ($dropin)."
  else
    HARDN_STATUS "info" "DNS already set in systemd-resolved; no changes needed."
  fi

# ---------- Path 2: NetworkManager (no interface bounce) ----------
elif command -v nmcli >/dev/null 2>&1 && safe_systemctl is-active NetworkManager --quiet; then
  HARDN_STATUS "info" "NetworkManager detected; applying global DNS preference (no disconnect)."

  # Prefer global dns to avoid per-connection churn; do not disable auto-DNS.
  # Not all distros use this; best-effort and non-fatal.
  if nmcli general hostname >/dev/null 2>&1; then
    # Hint to NM: push our resolv.conf content without disabling DHCP DNS
    nmcli general reload >/dev/null 2>&1 || true
  fi

  # If an active connection exists, gently add DNS; do not down/up.
  active_conn=$(nmcli -t -f NAME,TYPE,STATE c show --active 2>/dev/null | grep ':activated$' | head -n1 | cut -d: -f1)
  if [[ -n "$active_conn" ]]; then
    # Use ipv4.dns-priority to prefer ours without killing DHCP; keep ignore-auto-dns unchanged.
    nmcli c modify "$active_conn" +ipv4.dns "$primary_dns,$secondary_dns" ipv4.dns-priority -50 >/dev/null 2>&1 && {
      changes_made=true
      # A gentle nudge that doesn’t drop link
      nmcli connection reload >/dev/null 2>&1 || true
      HARDN_STATUS "pass" "Added preferred DNS to active connection: $active_conn"
    } || HARDN_STATUS "info" "Could not apply per-connection DNS (non-fatal)."
  else
    HARDN_STATUS "info" "No active NM connection found; skipping per-connection changes."
  fi

# ---------- Path 3: Plain resolv.conf (last resort) ----------
else
  # Don’t touch if it’s a symlink (likely managed by resolved or resolvconf)
  if [[ -L "$resolv_conf" ]]; then
    HARDN_STATUS "warning" "$resolv_conf is a symlink (managed). Skipping direct edits."
  elif [[ -w "$resolv_conf" ]]; then
    HARDN_STATUS "info" "Updating plain $resolv_conf (last resort; may be overwritten by DHCP)."
    backup="${resolv_conf}.bak.$(date +%Y%m%d%H%M%S)"
    cp -a "$resolv_conf" "$backup" 2>/dev/null || true

    newfile="$(mktemp)"
    {
      echo "# Generated by HARDN-XDR (light DNS)"
      echo "# Provider: $selected_provider"
      echo "nameserver $primary_dns"
      echo "nameserver $secondary_dns"
      # Preserve search/options lines if any
      grep -E '^\s*(search|domain|options)\b' "$backup" 2>/dev/null || true
    } > "$newfile"

    if ! cmp -s "$newfile" "$resolv_conf"; then
      mv "$newfile" "$resolv_conf"
      chmod 0644 "$resolv_conf"
      changes_made=true
      HARDN_STATUS "pass" "Wrote $resolv_conf (backup at $backup)."
    else
      rm -f "$newfile"
      HARDN_STATUS "info" "resolv.conf already contained desired nameservers."
    fi
  else
    HARDN_STATUS "warning" "Cannot write $resolv_conf; leaving DNS unchanged."
  fi
fi

# ---------- Wrap-up ----------
if $changes_made; then
  HARDN_STATUS "pass" "DNS set to $selected_provider: $primary_dns, $secondary_dns"
else
  HARDN_STATUS "info" "DNS already configured; no changes applied."
fi

return 0 2>/dev/null || hardn_module_exit 0