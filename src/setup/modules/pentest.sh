#!/bin/bash

# Prevent execution if run directly instead of being sourced
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo "Error: This script should be sourced by hardn-main.sh, not executed directly."
    exit 1
fi

# Prevent execution of functions when sourced multiple times
if [ -z "${_HARDN_PENTEST_SOURCED:-}" ]; then
    _HARDN_PENTEST_SOURCED=1

hardn_pentest_handle_error() {
        local exit_code="${1:-1}"
        local error_message="${2:-Unknown error occurred}"

        HARDN_STATUS "error" "$error_message"
        return "${exit_code}"
}

hardn_pentest_apply_audit_measures() {
        HARDN_STATUS "info" "Implementing recommended Lynis hardening measures..."

        # Secure cron directories in parallel
        {
            chmod 600 /etc/crontab /etc/cron.* 2>/dev/null || true
            chmod 700 /etc/cron.d /etc/cron.daily /etc/cron.hourly /etc/cron.monthly /etc/cron.weekly 2>/dev/null || true
        } &

        if [[ -f /etc/default/grub ]] && ! grep -q "audit=1" /etc/default/grub; then
            sed -i 's/GRUB_CMDLINE_LINUX="/GRUB_CMDLINE_LINUX="audit=1 /' /etc/default/grub
            if update-grub 2>/dev/null; then
                HARDN_STATUS "info" "Added kernel audit parameter to GRUB configuration"
            else
                HARDN_STATUS "warning" "Failed to update GRUB configuration"
            fi
        fi

        # Apply kernel hardening via sysctl
        if [[ -d /etc/sysctl.d ]]; then
            cat > /etc/sysctl.d/99-lynis-hardening.conf <<'EOF'
# Kernel hardening settings recommended by Lynis
kernel.kptr_restrict = 2
kernel.dmesg_restrict = 1
kernel.perf_event_paranoid = 3
kernel.sysrq = 0
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1
EOF
            if sysctl -p /etc/sysctl.d/99-lynis-hardening.conf 2>/dev/null; then
                HARDN_STATUS "info" "Applied kernel hardening parameters"
            else
                HARDN_STATUS "warning" "Failed to apply some kernel hardening parameters"
            fi
        fi

        # Wait for background jobs to complete
        wait

        HARDN_STATUS "pass" "Basic audit measures implemented"
}

hardn_pentest_harden_ssh() {
        if [[ ! -f /etc/ssh/sshd_config ]]; then
            HARDN_STATUS "warning" "SSH configuration file not found"
            return 1
        fi

        cp /etc/ssh/sshd_config "/etc/ssh/sshd_config.bak.$(date +%Y%m%d-%H%M%S)"

        # Create a new hardened sshd_config using a heredoc
        cat > /etc/ssh/sshd_config <<'EOF'
# HARDN-XDR Hardened SSH Configuration
Include /etc/ssh/sshd_config.d/*.conf

Port 8022
LogLevel VERBOSE

# Authentication settings
LoginGraceTime 60
PermitRootLogin prohibit-password
StrictModes yes
MaxAuthTries 3
MaxSessions 4

PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2
IgnoreRhosts yes

# Disable password authentication
PasswordAuthentication no
PermitEmptyPasswords no
KbdInteractiveAuthentication no

# PAM integration
UsePAM yes

# Security settings
AllowAgentForwarding no
X11Forwarding no
PrintMotd no
TCPKeepAlive no
ClientAliveInterval 300
ClientAliveCountMax 0
UseDNS no
MaxStartups 10:30:60

# Allow locale environment variables
AcceptEnv LANG LC_*

# SFTP subsystem
Subsystem sftp /usr/lib/openssh/sftp-server
EOF

        hardn_pentest_configure_firewall_for_ssh
        hardn_pentest_restart_ssh_service

        return 0
}

hardn_pentest_configure_firewall_for_ssh() {
        local firewall_type=""

        if command -v ufw >/dev/null 2>&1; then
            firewall_type="ufw"
        elif command -v firewall-cmd >/dev/null 2>&1; then
            firewall_type="firewalld"
        elif command -v iptables >/dev/null 2>&1; then
            firewall_type="iptables"
        else
            firewall_type="none"
        fi

        case "$firewall_type" in
            ufw)
                if ufw allow 8022/tcp comment "SSH on non-standard port" >/dev/null 2>&1; then
                    HARDN_STATUS "info" "UFW rule added for SSH on port 8022"
                else
                    HARDN_STATUS "warning" "Failed to add UFW rule for SSH on port 8022"
                fi
                ;;
            firewalld)
                if firewall-cmd --permanent --add-port=8022/tcp >/dev/null 2>&1; then
                    if firewall-cmd --reload >/dev/null 2>&1; then
                        HARDN_STATUS "info" "Firewalld rule added for SSH on port 8022"
                    else
                        HARDN_STATUS "warning" "Failed to reload firewalld rules"
                    fi
                else
                    HARDN_STATUS "warning" "Failed to add firewalld rule for SSH on port 8022"
                fi
                ;;
            iptables)
                if iptables -A INPUT -p tcp --dport 8022 -j ACCEPT >/dev/null 2>&1; then
                    HARDN_STATUS "info" "iptables rule added for SSH on port 8022"
                else
                    HARDN_STATUS "warning" "Failed to add iptables rule for SSH on port 8022"
                fi
                ;;
            *)
                HARDN_STATUS "warning" "No supported firewall detected. Please manually configure firewall to allow SSH on port 8022"
                ;;
        esac
}

hardn_pentest_restart_ssh_service() {
        local ssh_service=""

        if systemctl is-active --quiet ssh; then
            ssh_service="ssh"
        elif systemctl is-active --quiet sshd; then
            ssh_service="sshd"
        else
            ssh_service="none"
        fi

        case "$ssh_service" in
            ssh|sshd)
                if systemctl restart "$ssh_service"; then
                    HARDN_STATUS "info" "${ssh_service^^} service restarted successfully"
                else
                    HARDN_STATUS "warning" "Failed to restart ${ssh_service^^} service"
                fi
                ;;
            *)
                HARDN_STATUS "warning" "SSH service not found or not active"
                ;;
        esac
}

hardn_pentest_enable_process_accounting() {
        # Attempt enabling process accounting
        if touch /var/log/pacct && accton /var/log/pacct; then
            HARDN_STATUS "info" "Process accounting enabled"
            return 0
        else
            HARDN_STATUS "warning" "Failed to enable process accounting"
            return 1
        fi
}

hardn_pentest_setup_accounting() {
        if ! command -v accton >/dev/null 2>&1; then
            HARDN_STATUS "info" "Installing process accounting package..."
            if ! apt-get -qq install -y acct >/dev/null 2>&1; then
                HARDN_STATUS "error" "Failed to install acct package"
                return 1
            fi
        fi

        hardn_pentest_enable_process_accounting
        return $?
}

# Run the audit
hardn_pentest_audit() {
        hardn_pentest_apply_audit_measures

        if [[ -f /etc/ssh/sshd_config ]]; then
            hardn_pentest_harden_ssh
            hardn_pentest_setup_accounting
        fi

        HARDN_STATUS "pass" "Audit measures implemented"
}

hardn_pentest_setup_lynis() {
        if ! command -v lynis >/dev/null 2>&1; then
            HARDN_STATUS "info" "Installing Lynis..."
            if ! apt-get -qq install -y lynis >/dev/null 2>&1; then
                HARDN_STATUS "warning" "Failed to install Lynis"
                return 1
            fi
        fi

        mkdir -p /var/log/lynis
        chmod 750 /var/log/lynis

        HARDN_STATUS "info" "Running Lynis system audits..."
        lynis audit system --verbose --log-file /var/log/lynis/hardn-audit.log --report-file /var/log/lynis/hardn-report.dat 2>/dev/null &
        local lynis_pid=$!

        # Wait for Lynis to complete
        wait $lynis_pid

        # Report summary generation
        if [[ -f /var/log/lynis/hardn-report.dat ]]; then
            local hardening_index
            hardening_index=$(grep "hardening_index=" /var/log/lynis/hardn-report.dat 2>/dev/null | cut -d'=' -f2)

            if [[ -n "$hardening_index" ]]; then
                HARDN_STATUS "info" "Lynis Hardening Index: ${hardening_index}%"
            fi
            HARDN_STATUS "pass" "Lynis audit completed. Reports saved to /var/log/lynis/"
        else
            HARDN_STATUS "warning" "Lynis report file not found. Check /var/log/lynis/ for details."
        fi
}

hardn_pentest_setup_nmap() {
        if ! command -v nmap >/dev/null 2>&1; then
            HARDN_STATUS "info" "Installing nmap..."
            if ! apt-get -qq install -y nmap >/dev/null 2>&1; then
                HARDN_STATUS "error" "Failed to install nmap"
                return 1
            fi
        fi

        mkdir -p /var/log/nmap
        chmod 750 /var/log/nmap

        HARDN_STATUS "info" "Running network security scan on localhost..."
        nmap -sV -sC -oA /var/log/nmap/local-scan localhost 2>/dev/null || true
        HARDN_STATUS "pass" "Network security scan completed. Results saved to /var/log/nmap/local-scan.nmap"
}

# The main function
hardn_pentest_main() {
        HARDN_STATUS "info" "Running comprehensive security audit with Lynis and nmap..."
        hardn_pentest_audit
        hardn_pentest_setup_lynis
        hardn_pentest_setup_nmap
        HARDN_STATUS "info" "Security assessment complete. Review log files for recommendations."
}

fi
