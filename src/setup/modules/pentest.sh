#!/bin/bash

if ! command -v HARDN_STATUS &> /dev/null; then
    HARDN_STATUS() {
        local status="$1"
        local message="$2"
        case "$status" in
            "pass")
                echo -e "\033[1;32m[PASS]\033[0m $message"
                ;;
            "warning")
                echo -e "\033[1;33m[WARNING]\033[0m $message"
                ;;
            "error")
                echo -e "\033[1;31m[ERROR]\033[0m $message"
                ;;
            "info")
                echo -e "\033[1;34m[INFO]\033[0m $message"
                ;;
            *)
                echo -e "\033[1;37m[UNKNOWN]\033[0m $message"
                ;;
        esac
    }
fi

HARDN_STATUS "info" "Running comprehensive security audit with Lynis and nmap..."

set -o pipefail  

handle_error() {
    local exit_code="${1:-1}"  
    local error_message="${2:-Unknown error occurred}" 

    HARDN_STATUS "error" "$error_message"
    return "${exit_code}"
}

audit() {
    HARDN_STATUS "info" "Implementing recommended Lynis hardening measures..."

    chmod 600 /etc/crontab /etc/cron.* 2>/dev/null || true
    chmod 700 /etc/cron.d /etc/cron.daily /etc/cron.hourly /etc/cron.monthly /etc/cron.weekly 2>/dev/null || true

    [ -f /etc/default/grub ] && ! grep -q "audit=1" /etc/default/grub && {
        sed -i 's/GRUB_CMDLINE_LINUX="/GRUB_CMDLINE_LINUX="audit=1 /' /etc/default/grub
        update-grub 2>/dev/null || true
        HARDN_STATUS "info" "Added kernel audit parameter to GRUB configuration"
    }

    [ -d /etc/sysctl.d ] && {
        cat > /etc/sysctl.d/99-lynis-hardening.conf <<EOF
# Kernel hardening settings recommended by Lynis
kernel.kptr_restrict = 2
kernel.dmesg_restrict = 1
kernel.perf_event_paranoid = 3
kernel.sysrq = 0
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1
EOF
        sysctl -p /etc/sysctl.d/99-lynis-hardening.conf 2>/dev/null || true
    }

    [ -f /etc/ssh/sshd_config ] && {
        # Backup the original sshd_config
        cp /etc/ssh/sshd_config "/etc/ssh/sshd_config.bak.$(date +%Y%m%d-%H%M%S)"

        # Create a new hardened sshd_config
        cat > /etc/ssh/sshd_config <<'EOF'
###############################################
# THIS IS THE SECURITY HARDNED CUSTOM SSHD_CONFIG #
###################################################

# This is the sshd server system-wide configuration file.
# This is the configuration we shall use for HARDN-XDR
# Much of the settings in this file are from.
# https://linux-audit.com/ssh/audit-and-harden-your-ssh-configuration/
# And they are set as the result of much lynis testing.
# It is Configured according to lynis security testing
# This is the configuration file that will be implemented as part of
# HARDN-XDR
# All the uncommented lines are self-explanatory


# The strategy used for options in the default sshd_config shipped with
# OpenSSH is to specify options with their default value where
# possible, but leave them commented.  Uncommented options override the
# default value.

Include /etc/ssh/sshd_config.d/*.conf

# Use an unconventional port number for ssh.
# Protects against brute force attacks that seek port 22
Port 8022
#AddressFamily any
#ListenAddress 0.0.0.0
#ListenAddress ::

#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_ecdsa_key
#HostKey /etc/ssh/ssh_host_ed25519_key

# Ciphers and keying
#RekeyLimit default none

# Logging
#SyslogFacility AUTH
LogLevel VERBOSE

# Authentication:
LoginGraceTime 60
PermitRootLogin prohibit-password
StrictModes yes
MaxAuthTries 3
MaxSessions 4

PubkeyAuthentication yes

# Expect .ssh/authorized_keys2 to be disregarded by default in future.
AuthorizedKeysFile	.ssh/authorized_keys .ssh/authorized_keys2

#AuthorizedPrincipalsFile none

#AuthorizedKeysCommand none/
#AuthorizedKeysCommandUser nobody

# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
#HostbasedAuthentication no
# Change to yes if you don't trust ~/.ssh/known_hosts for
# HostbasedAuthentication
#IgnoreUserKnownHosts no
# Don't read the user's ~/.rhosts and ~/.shosts files
IgnoreRhosts yes

# To disable tunneled clear text passwords, change to no here!
PasswordAuthentication no
PermitEmptyPasswords no

# Change to yes to enable challenge-response passwords (beware issues with
# some PAM modules and threads)
KbdInteractiveAuthentication no

# Kerberos options
#KerberosAuthentication no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes
#KerberosGetAFSToken no

# GSSAPI options
#GSSAPIAuthentication no
#GSSAPICleanupCredentials yes
#GSSAPIStrictAcceptorCheck yes
#GSSAPIKeyExchange no

# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the KbdInteractiveAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via KbdInteractiveAuthentication may bypass
# the setting of "PermitRootLogin prohibit-password".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and KbdInteractiveAuthentication to 'no'.
UsePAM yes

AllowAgentForwarding no
#AllowTcpForwarding yes
#GatewayPorts no
X11Forwarding no
#X11DisplayOffset 10
#X11UseLocalhost yes
#PermitTTY yes
PrintMotd no
#PrintLastLog yes
TCPKeepAlive no
#PermitUserEnvironment no
#Compression delayed
ClientAliveInterval 300
ClientAliveCountMax 0
UseDNS no
#PidFile /run/sshd.pid
MaxStartups 10:30:60
#PermitTunnel no
#ChrootDirectory none
#VersionAddendum none

# no default banner path
#Banner none

# Allow client to pass locale environment variables
AcceptEnv LANG LC_*

# override default of no subsystems
Subsystem	sftp	/usr/lib/openssh/sftp-server

# Example of overriding settings on a per-user basis
#Match User anoncvs
#	X11Forwarding no
#	AllowTcpForwarding no
#	PermitTTY no
#	ForceCommand cvs server
#   MaxSessions 4
EOF

        # Change ssh port from 22 to 8022
        local firewall_type=""

        if command -v ufw >/dev/null 2>&1; then
            firewall_type="ufw"
        elif command -v firewall-cmd >/dev/null 2>&1; then
            firewall_type="firewalld"
        elif command -v iptables >/dev/null 2>&1; then
            firewall_type="iptables"
        fi

        case "$firewall_type" in
            "ufw")
                if ufw allow 8022/tcp comment "SSH on non-standard port" >/dev/null 2>&1; then
                    HARDN_STATUS "info" "UFW rule added for SSH on port 8022"
                else
                    HARDN_STATUS "warning" "Failed to add UFW rule for SSH on port 8022"
                fi
                ;;
            "firewalld")
                if firewall-cmd --permanent --add-port=8022/tcp >/dev/null 2>&1 &&
                   firewall-cmd --reload >/dev/null 2>&1; then
                    HARDN_STATUS "info" "Firewalld rule added for SSH on port 8022"
                else
                    HARDN_STATUS "warning" "Failed to add firewalld rule for SSH on port 8022"
                fi
                ;;
            "iptables")
                if iptables -A INPUT -p tcp --dport 8022 -j ACCEPT >/dev/null 2>&1; then
                    HARDN_STATUS "info" "iptables rule added for SSH on port 8022"
                else
                    HARDN_STATUS "warning" "Failed to add iptables rule for SSH on port 8022"
                fi
                ;;
            *)
                HARDN_STATUS "warning" "No supported firewall detected. Please manually configure firewall to allow SSH on port 8022"
                ;;
        esac

        # Restart SSH
        local ssh_service=""
        if systemctl is-active --quiet ssh; then
            ssh_service="ssh"
        elif systemctl is-active --quiet sshd; then
            ssh_service="sshd"
        fi

        case "$ssh_service" in
            "ssh"|"sshd")
                if systemctl restart "$ssh_service"; then
                    HARDN_STATUS "info" "${ssh_service^^} service restarted successfully"
                else
                    HARDN_STATUS "warning" "Failed to restart ${ssh_service^^} service"
                fi
                ;;
            *)
                HARDN_STATUS "warning" "SSH service not found or not active"
                ;;
        esac



        enable_process_accounting() {
            # Attempt enabling process accounting
            if touch /var/log/pacct && accton /var/log/pacct; then
                HARDN_STATUS "info" "Process accounting enabled"
                return 0
            else
                HARDN_STATUS "warning" "Failed to enable process accounting"
                return 1
            fi
        }

        # Check if accton is available, install if needed
        if command -v accton >/dev/null 2>&1; then
            enable_process_accounting
        else
            # Need to install the package first
            HARDN_STATUS "info" "Installing process accounting package..."
            if apt install -y acct >/dev/null 2>&1; then
                # Pkg installed, attempting to enable it
                enable_process_accounting
            else
                HARDN_STATUS "error" "Failed to install acct package"
            fi
        fi

        HARDN_STATUS "pass" "Audit measures implemented"
    }
}

setup_lynis() {
    if ! command -v lynis >/dev/null 2>&1; then
        HARDN_STATUS "info" "Installing Lynis..."
        apt install lynis -y >/dev/null 2>&1
    fi

    # Lynis log directory
    mkdir -p /var/log/lynis
    chmod 750 /var/log/lynis

    HARDN_STATUS "info" "Running Lynis system audits..."
    lynis audit system --verbose --log-file /var/log/lynis/hardn-audit.log --report-file /var/log/lynis/hardn-report.dat 2>/dev/null

    # Report summary generation - using proper if-else structure
    if [[ -f /var/log/lynis/hardn-report.dat ]]; then
        hardening_index=$(grep "hardening_index=" /var/log/lynis/hardn-report.dat 2>/dev/null | cut -d'=' -f2)
        if [[ -n "$hardening_index" ]]; then
            HARDN_STATUS "info" "Lynis Hardening Index: ${hardening_index}%"
        fi
        HARDN_STATUS "pass" "Lynis audit completed. Reports saved to /var/log/lynis/"
    else
        HARDN_STATUS "warning" "Lynis report file not found. Check /var/log/lynis/ for details."
    fi
}

setup_nmap() {
    if ! command -v nmap >/dev/null 2>&1; then
        HARDN_STATUS "info" "Installing nmap..."
        apt install nmap -y >/dev/null 2>&1
    fi

    mkdir -p /var/log/nmap
    chmod 750 /var/log/nmap

    HARDN_STATUS "info" "Running network security scan on localhost..."
    nmap -sV -sC -oA /var/log/nmap/local-scan localhost 2>/dev/null || true
    HARDN_STATUS "pass" "Network security scan completed. Results saved to /var/log/nmap/local-scan.nmap"
}

main() {
    audit
    setup_lynis
    setup_nmap
    HARDN_STATUS "info" "Security assessment complete. Review log files for recommendations."
}

main
