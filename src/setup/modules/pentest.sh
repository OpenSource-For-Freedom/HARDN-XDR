#!/bin/bash

source "/usr/lib/hardn-xdr/src/setup/hardn-common.sh" 2>/dev/null || \
source "$(dirname "$(dirname "$(realpath "${BASH_SOURCE[0]}")")")/hardn-common.sh" 2>/dev/null || {
    echo "Warning: Could not source hardn-common.sh, using basic functions"
    HARDN_STATUS() { echo "$(date '+%Y-%m-%d %H:%M:%S') - [$1] $2"; }
    log_message() { echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"; }
    check_root() { [[ $EUID -eq 0 ]]; }
    is_installed() { command -v "$1" >/dev/null 2>&1 || dpkg -s "$1" >/dev/null 2>&1; }
    hardn_yesno() { 
        [[ "$SKIP_WHIPTAIL" == "1" ]] && return 0
        echo "Auto-confirming: $1" >&2
        return 0
    }
    hardn_msgbox() { 
        [[ "$SKIP_WHIPTAIL" == "1" ]] && echo "Info: $1" >&2 && return 0
        echo "Info: $1" >&2
    }
    is_container_environment() {
        [[ -n "$CI" ]] || [[ -n "$GITHUB_ACTIONS" ]] || [[ -f /.dockerenv ]] || \
        [[ -f /run/.containerenv ]] || grep -qa container /proc/1/environ 2>/dev/null
    }
    is_systemd_available() {
        [[ -d /run/systemd/system ]] && systemctl --version >/dev/null 2>&1
    }
    create_scheduled_task() {
        echo "Info: Scheduled task creation skipped in CI environment" >&2
        return 0
    }
    check_container_limitations() {
        if [[ ! -w /proc/sys ]] || [[ -f /.dockerenv ]]; then
            echo "Warning: Container limitations detected:" >&2
            echo "  - read-only /proc/sys - kernel parameter changes limited" >&2
        fi
        return 0
    }
    hardn_module_exit() {
        local exit_code="${1:-0}"
        exit "$exit_code"
    }
    safe_package_install() {
        local package="$1"
        if [[ "$CI" == "true" ]] || ! check_root; then
            echo "Info: Package installation skipped in CI environment: $package" >&2
            return 0
        fi
        echo "Warning: Package installation not implemented in fallback: $package" >&2
        return 1
    }
}

report_dir="/var/log/pentest"
mkdir -p "$report_dir"
chmod 750 "$report_dir"

tools=(
    "Lynis"
    "nmap"
    "Nikto"
    "Tiger"
    "John the Ripper"
    "Hydra"
    "OpenVAS"
    "Metasploit"
    "fail2ban"
    "chkrootkit"
    "clamav"
)

tool_choices=()
for t in "${tools[@]}"; do
    tool_choices+=("$t" "$t" "OFF")
done

if [[ "$SKIP_WHIPTAIL" == "1" ]] || ! command -v whiptail >/dev/null 2>&1; then
    HARDN_STATUS "info" "Running in non-interactive mode, skipping pentest tool installation"
    return 0 2>/dev/null || hardn_module_exit 0
fi

if ! selected=$(whiptail --title "Pentest Tools" --checklist \
"Select tools to install (SPACE to toggle):" 20 78 12 \
"${tool_choices[@]}" 3>&1 1>&2 2>&3); then
    HARDN_STATUS "info" "Pentest cancelled."
    return 0 2>/dev/null || hardn_module_exit 0
fi

IFS=' ' read -r -a selected_tools <<< "$selected"

# Update package lists before installing tools
HARDN_STATUS "info" "Updating package lists for pentest tools..."
apt-get update >/dev/null 2>&1 || HARDN_STATUS "warning" "Failed to update package lists"

for tool in "${selected_tools[@]}"; do
    name=$(echo "$tool" | tr -d '"')
    case "$name" in
        "Lynis")
            if ! command -v lynis >/dev/null; then
                HARDN_STATUS "info" "Installing Lynis..."
                apt install -y lynis >/dev/null 2>&1 || HARDN_STATUS "error" "Failed to install Lynis."
            fi
            ;;
        "nmap")
            if ! command -v nmap >/dev/null; then
                HARDN_STATUS "info" "Installing nmap..."
                apt install -y nmap >/dev/null 2>&1 || HARDN_STATUS "error" "Failed to install nmap."
            fi
            ;;
        "Nikto")
            if ! command -v nikto >/dev/null; then
                HARDN_STATUS "info" "Installing Nikto..."
                apt install -y nikto libnet-ssleay-perl >/dev/null 2>&1 || HARDN_STATUS "error" "Failed to install Nikto."
            fi
            ;;
        "Tiger")
            if ! command -v tiger >/dev/null; then
                HARDN_STATUS "info" "Installing Tiger..."
                apt install -y tiger >/dev/null 2>&1 || HARDN_STATUS "error" "Failed to install Tiger."
            fi
            ;;
        "John the Ripper")
            if ! command -v john >/dev/null; then
                HARDN_STATUS "info" "Installing John the Ripper..."
                apt install -y john >/dev/null 2>&1 || HARDN_STATUS "error" "Failed to install John the Ripper."
            fi
            ;;
        "Hydra")
            if ! command -v hydra >/dev/null; then
                HARDN_STATUS "info" "Installing Hydra..."
                apt install -y hydra >/dev/null 2>&1 || HARDN_STATUS "error" "Failed to install Hydra."
            fi
            ;;
        "OpenVAS")
            if ! command -v gvm >/dev/null; then
                HARDN_STATUS "info" "Installing OpenVAS (Greenbone)..."
                apt install -y gvm >/dev/null 2>&1 || HARDN_STATUS "error" "Failed to install OpenVAS."
                gvm-setup || true
            fi
            ;;
        "Metasploit")
            if ! command -v msfconsole >/dev/null; then
                HARDN_STATUS "info" "Installing Metasploit Framework..."
                apt install -y metasploit-framework >/dev/null 2>&1 || HARDN_STATUS "error" "Failed to install Metasploit."
            fi
            ;;
        "fail2ban"|"chkrootkit"|"clamav")
            HARDN_STATUS "info" "$name assumed installed. Skipping installation."
            ;;
    esac
done

clear

HARDN_STATUS "pass" "[HARDN-XDR Pentest CLI Mode Enabled]"
HARDN_STATUS "info" "Selected tools have been installed or verified."
HARDN_STATUS "info" "You're now in CLI mode â€” use your tools manually."
HARDN_STATUS "info" "Reports can be saved to: $report_dir"
HARDN_STATUS "info" "Example: lynis audit system --log-file $report_dir/lynis.log"
HARDN_STATUS "info" "Example: nmap -sV -oA $report_dir/scan localhost"
HARDN_STATUS "info" "Example: clamscan -r / --bell -i > $report_dir/clamav.txt"

return 0 2>/dev/null || hardn_module_exit 0
set -e
