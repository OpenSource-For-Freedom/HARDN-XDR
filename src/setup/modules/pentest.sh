#!/bin/bash
source /usr/lib/hardn-xdr/src/setup/hardn-common.sh
set -e

set -o pipefail


# Install tools first

# Install tools first, with error handling and status

for tool in "Lynis" "nmap" "Nikto" "Tiger" "John the Ripper" "Hydra"; do
    case "$tool" in
        Lynis)
            if ! command -v lynis >/dev/null 2>&1; then
                HARDN_STATUS "info" "Installing Lynis..."
                if apt install lynis -y >/dev/null 2>&1; then
                    HARDN_STATUS "pass" "Lynis installed."
                else
                    HARDN_STATUS "warning" "Failed to install Lynis. Skipping."
                fi
            else
                HARDN_STATUS "pass" "Lynis already installed."
            fi
            ;;
        nmap)
            if ! command -v nmap >/dev/null 2>&1; then
                HARDN_STATUS "info" "Installing nmap..."
                if apt install nmap -y >/dev/null 2>&1; then
                    HARDN_STATUS "pass" "nmap installed."
                else
                    HARDN_STATUS "warning" "Failed to install nmap. Skipping."
                fi
            else
                HARDN_STATUS "pass" "nmap already installed."
            fi
            ;;
        "John the Ripper")
            if ! command -v john >/dev/null 2>&1; then
                HARDN_STATUS "info" "Installing John the Ripper..."
                if apt install john -y >/dev/null 2>&1; then
                    HARDN_STATUS "pass" "John the Ripper installed."
                else
                    HARDN_STATUS "warning" "Failed to install John the Ripper. Skipping."
                fi
            else
                HARDN_STATUS "pass" "John the Ripper already installed."
            fi
            ;;
        Hydra)
            if ! command -v hydra >/dev/null 2>&1; then
                HARDN_STATUS "info" "Installing Hydra..."
                if apt install hydra -y >/dev/null 2>&1; then
                    HARDN_STATUS "pass" "Hydra installed."
                else
                    HARDN_STATUS "warning" "Failed to install Hydra. Skipping."
                fi
            else
                HARDN_STATUS "pass" "Hydra already installed."
            fi
            ;;
    esac
done

HARDN_STATUS "info" "All install attempts complete. Launching menu..."

# Whiptail-driven selection for pentest type, report location, and tool choice
pentest_types=("Quick Scan" "Full Audit" "Vulnerability Scan" "Compliance Check" "Custom")
pentest_tools=("Lynis" "nmap" "OpenVAS" "Nikto" "Tiger" "OSSEC" "John the Ripper" "Hydra" "Metasploit" "Other")

# Prepare tag-item pairs for whiptail menu
pentest_menu_items=()
for t in "${pentest_types[@]}"; do
    pentest_menu_items+=("$t" "")
done

echo "[DEBUG] Launching whiptail menu for pentest type..."
pentest_type=$(whiptail --title "Pentest Type" --menu "Select the type of pentest to run:" 15 60 5 "${pentest_menu_items[@]}" 3>&1 1>&2 2>&3)
whiptail_exit=$?
echo "[DEBUG] whiptail exit code: $whiptail_exit"
echo "[DEBUG] pentest_type selected: $pentest_type"

if [[ $whiptail_exit -ne 0 ]]; then
    HARDN_STATUS "info" "Pentest cancelled by user."
    exit 0
fi

# Prompt for pentest tools
pentest_tool_items=()
for t in "${pentest_tools[@]}"; do
    pentest_tool_items+=("$t" "$t" "OFF")
done

echo "[DEBUG] Launching whiptail checklist for pentest tools..."
pentest_tool_choices=$(whiptail --title "Pentest Tools" --checklist "Select pentest tools to use (SPACE to select):" 20 70 10 "${pentest_tool_items[@]}" 3>&1 1>&2 2>&3)
tool_exit=$?
echo "[DEBUG] whiptail exit code: $tool_exit"
echo "[DEBUG] pentest_tool_choices: $pentest_tool_choices"
if [[ $tool_exit -ne 0 ]]; then
    HARDN_STATUS "info" "Pentest tool selection cancelled by user."
    exit 0
fi

selected_tools=()
while read -r tool; do
    selected_tools+=("$tool")
done < <(echo $pentest_tool_choices | xargs -n1)

# Prompt for report directory
report_dir=$(whiptail --title "Report Directory" --inputbox "Enter the directory to save pentest reports:" 10 60 "/var/log/pentest" 3>&1 1>&2 2>&3)
report_exit=$?
echo "[DEBUG] whiptail exit code: $report_exit"
echo "[DEBUG] report_dir: $report_dir"
if [[ $report_exit -ne 0 ]]; then
    HARDN_STATUS "info" "Report directory selection cancelled by user."
    exit 0
fi
mkdir -p "$report_dir" && chmod 750 "$report_dir"

HARDN_STATUS "info" "Pentest type: $pentest_type"
HARDN_STATUS "info" "Selected tools: $pentest_tool_choices"
HARDN_STATUS "info" "Report directory: $report_dir"

for tool in "${selected_tools[@]}"; do
    # Skip empty tool names
    if [[ -z "$tool" ]]; then
        continue
    fi
    # Nikto install logic
    if [[ "$tool" == "Nikto" ]]; then
        if ! command -v nikto >/dev/null 2>&1; then
            HARDN_STATUS "info" "Installing Nikto..."
            if apt install nikto -y >/dev/null 2>&1; then
                HARDN_STATUS "pass" "Nikto installed via apt."
            else
                HARDN_STATUS "warning" "Failed to install Nikto via apt. Trying cpanm..."
                if command -v cpanm >/dev/null 2>&1; then
                    cpanm Nikto
                fi
            fi
        else
            HARDN_STATUS "pass" "Nikto already installed."
        fi
    fi

    case "$tool" in
        nmap)
            nmap_types=("Default" "Service Version (-sV)" "Aggressive (-A)" "OS Detection (-O)" "Full TCP (-sS)" "UDP (-sU)" "Top Ports (--top-ports 100)" "Custom")
            nmap_menu_items=()
            for t in "${nmap_types[@]}"; do nmap_menu_items+=("$t" ""); done
            scan_type=$(whiptail --title "Nmap Scan Type" --menu "Select nmap scan type:" 15 60 5 "${nmap_menu_items[@]}" 3>&1 1>&2 2>&3)
            if [[ $? -ne 0 ]]; then return 0; fi
            case "$scan_type" in
                "Service Version (-sV)")
                    nmap -sV -oA "$report_dir/nmap-sV-scan" localhost
                    ;;
                "Aggressive (-A)")
                    nmap -A -oA "$report_dir/nmap-A-scan" localhost
                    ;;
                "OS Detection (-O)")
                    nmap -O -oA "$report_dir/nmap-O-scan" localhost
                    ;;
                "Full TCP (-sS)")
                    nmap -sS -oA "$report_dir/nmap-sS-scan" localhost
                    ;;
                "UDP (-sU)")
                    nmap -sU -oA "$report_dir/nmap-sU-scan" localhost
                    ;;
                "Top Ports (--top-ports 100)")
                    nmap --top-ports 100 -oA "$report_dir/nmap-top100-scan" localhost
                    ;;
                "Custom")
                    custom_args=$(whiptail --title "Custom Nmap Args" --inputbox "Enter custom nmap arguments:" 10 60 "" 3>&1 1>&2 2>&3)
                    nmap $custom_args -oA "$report_dir/nmap-custom-scan" localhost
                    ;;
                *)
                    nmap -oA "$report_dir/nmap-default-scan" localhost
                    ;;
            esac
            return 0
            ;;
        Nikto)
            # Nikto submenu with correct options
            nikto_host=$(whiptail --title "Nikto Host" --inputbox "Enter target host for Nikto scan:" 10 60 "localhost" 3>&1 1>&2 2>&3)
            nikto_port=$(whiptail --title "Nikto Port" --inputbox "Enter target port (default 80):" 10 60 "80" 3>&1 1>&2 2>&3)
            nikto_ssl=$(whiptail --title "Nikto SSL" --yesno "Use SSL?" 8 40 3>&1 1>&2 2>&3)
            nikto_tuning=$(whiptail --title "Nikto Tuning" --inputbox "Enter Nikto tuning value (optional):" 10 60 "" 3>&1 1>&2 2>&3)
            nikto_output="$report_dir/nikto-$(date +%Y%m%d-%H%M%S).txt"
            nikto_cmd="nikto -h $nikto_host -p $nikto_port"
            if [[ $? -eq 0 ]]; then nikto_cmd+=" -ssl"; fi
            if [[ -n "$nikto_tuning" ]]; then nikto_cmd+=" -Tuning $nikto_tuning"; fi
            nikto_cmd+=" -output $nikto_output"
            eval $nikto_cmd
            return 0
            ;;
        OpenVAS)
            whiptail --title "OpenVAS Manual Run" --msgbox "OpenVAS requires setup and running as a service.\nTo start: sudo systemctl start openvas-scanner\nTo access web UI: https://localhost:9392\nRefer to documentation for scan setup." 12 70
            return 0
            ;;
        "John the Ripper")
            john_mode=$(whiptail --title "John the Ripper" --menu "Select mode:" 10 60 2 "Test" "Run benchmark test" "Custom" "Custom arguments" 3>&1 1>&2 2>&3)
            if [[ $? -ne 0 ]]; then return 0; fi
            case "$john_mode" in
                "Test")
                    john --test > "$report_dir/john-test.txt"
                    ;;
                "Custom")
                    custom_args=$(whiptail --title "Custom John Args" --inputbox "Enter custom John arguments:" 10 60 "" 3>&1 1>&2 2>&3)
                    john $custom_args > "$report_dir/john-custom.txt"
                    ;;
            esac
            return 0
            ;;
        Lynis)
            lynis audit system --verbose --log-file "$report_dir/lynis-audit.log" --report-file "$report_dir/lynis-report.dat"
            return 0
            ;;
        Tiger)
            tiger > "$report_dir/tiger.txt"
            return 0
            ;;
        Hydra)
            hydra -L /etc/passwd -P /etc/passwd localhost ssh > "$report_dir/hydra.txt"
            return 0
            ;;
        *)
            echo "[DEBUG] No submenu for $tool. Please run manually."
            return 0
            ;;
    esac
done
HARDN_STATUS "info" "Pentest complete. Review reports in $report_dir."

#Safe return or exit
return 0 2>/dev/null || exit 0