#!/bin/bash

is_installed() {
    if command -v apt >/dev/null 2>&1; then
        dpkg -s "$1" >/dev/null 2>&1
    elif command -v dnf >/dev/null 2>&1; then
        dnf list installed "$1" >/dev/null 2>&1
    elif command -v yum >/dev/null 2>&1; then
        yum list installed "$1" >/dev/null 2>&1
    elif command -v rpm >/dev/null 2>&1; then
        rpm -q "$1" >/dev/null 2>&1
    else
        return 1 # Cannot determine package manager
    fi
}

HARDN_STATUS "info" "Setting up NTP daemon with STIG authentication requirements..."

local ntp_servers="0.debian.pool.ntp.org 1.debian.pool.ntp.org 2.debian.pool.ntp.org 3.debian.pool.ntp.org"
local configured=false

# Create NTP authentication key file for STIG compliance
create_ntp_auth_keys() {
    local keys_file="/etc/ntp.keys"
    HARDN_STATUS "info" "Creating NTP authentication keys for STIG compliance..."
    
    # Generate random keys for symmetric authentication
    local key1=$(openssl rand -hex 16)
    local key2=$(openssl rand -hex 16)
    
    cat > "$keys_file" << EOF
# NTP Authentication Keys - STIG Requirement
# Auto-generated by HARDN-XDR
1 MD5 $key1
2 MD5 $key2
EOF
    
    chmod 600 "$keys_file"
    chown ntp:ntp "$keys_file" 2>/dev/null || chown root:root "$keys_file"
    
    HARDN_STATUS "pass" "NTP authentication keys created"
    echo "$keys_file"
}

# Enhanced NTP security configuration
create_secure_ntp_config() {
    local ntp_conf="$1"
    local keys_file="$2"
    
    HARDN_STATUS "info" "Creating STIG-compliant NTP configuration..."
    
    # Backup existing config
    cp "$ntp_conf" "${ntp_conf}.bak.$(date +%F-%T)" 2>/dev/null || true
    
    cat > "$ntp_conf" << EOF
# HARDN-XDR STIG Compliant NTP Configuration
# This configuration implements STIG requirements for time synchronization

# Authentication settings (STIG requirement)
keys $keys_file
trustedkey 1 2
requestkey 1
controlkey 2

# Restrict access for security
restrict default kod nomodify notrap nopeer noquery
restrict -6 default kod nomodify notrap nopeer noquery
restrict 127.0.0.1
restrict -6 ::1

# NTP servers with authentication preference
EOF

    # Add server entries with authentication
    for server in $ntp_servers; do
        echo "server $server iburst key 1" >> "$ntp_conf"
    done
    
    cat >> "$ntp_conf" << EOF

# Fallback servers (without authentication for availability)
server 127.127.1.0 prefer
fudge 127.127.1.0 stratum 10

# Drift file
driftfile /var/lib/ntp/ntp.drift

# Statistics logging for monitoring
statsdir /var/log/ntp/
statistics loopstats peerstats clockstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable

# Disable kernel time discipline
disable kernel

# Logging
logfile /var/log/ntp.log
logconfig =syncevents +peerevents +sysevents +allclock
EOF

    HARDN_STATUS "pass" "STIG-compliant NTP configuration created"
}

# Create NTP monitoring script
create_ntp_monitor() {
    HARDN_STATUS "info" "Creating NTP monitoring script for STIG compliance..."
    
    cat > /usr/local/bin/ntp-monitor.sh << 'EOF'
#!/bin/bash
# NTP Monitoring Script - STIG Compliance
# Monitors NTP synchronization and detects potential spoofing

LOG_FILE="/var/log/ntp-monitor.log"
ALERT_THRESHOLD=5  # seconds

log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

check_ntp_sync() {
    local offset
    local stratum
    local peer_count
    
    # Check if NTP is synchronized
    if ! ntpstat >/dev/null 2>&1; then
        log_message "ALERT: NTP not synchronized"
        return 1
    fi
    
    # Get time offset
    offset=$(ntpq -c rv | grep offset | cut -d= -f2 | tr -d ' ')
    if [ -n "$offset" ]; then
        # Check if offset is within acceptable range
        if [ "${offset%.*}" -gt "$ALERT_THRESHOLD" ] 2>/dev/null; then
            log_message "ALERT: Time offset too large: ${offset}ms"
        fi
    fi
    
    # Check stratum level
    stratum=$(ntpq -c rv | grep stratum | cut -d= -f2 | tr -d ' ')
    if [ -n "$stratum" ] && [ "$stratum" -gt 3 ]; then
        log_message "WARNING: High stratum level: $stratum"
    fi
    
    # Check number of peers
    peer_count=$(ntpq -p | grep -c '^[*+]')
    if [ "$peer_count" -lt 2 ]; then
        log_message "WARNING: Low peer count: $peer_count"
    fi
    
    log_message "INFO: NTP status OK - offset: ${offset}ms, stratum: $stratum, peers: $peer_count"
}

# Main monitoring function
main() {
    mkdir -p /var/log
    check_ntp_sync
}

main "$@"
EOF
    
    chmod 755 /usr/local/bin/ntp-monitor.sh
    chown root:root /usr/local/bin/ntp-monitor.sh
    
    # Add cron job for regular monitoring
    echo "*/15 * * * * root /usr/local/bin/ntp-monitor.sh" > /etc/cron.d/ntp-monitor
    chmod 644 /etc/cron.d/ntp-monitor
    
    HARDN_STATUS "pass" "NTP monitoring script created with 15-minute cron job"
}

# Prefer systemd-timesyncd if active
if systemctl is-active --quiet systemd-timesyncd; then
HARDN_STATUS "info" "systemd-timesyncd is active. Configuring..."
local timesyncd_conf="/etc/systemd/timesyncd.conf"
local temp_timesyncd_conf
temp_timesyncd_conf=$(mktemp)

if [[ ! -f "$timesyncd_conf" ]]; then
    HARDN_STATUS "info" "Creating $timesyncd_conf as it does not exist."
    echo "[Time]" > "$timesyncd_conf"
    chmod 644 "$timesyncd_conf"
fi

cp "$timesyncd_conf" "$temp_timesyncd_conf"

# Set NTP= explicitly
if grep -qE "^\s*NTP=" "$temp_timesyncd_conf"; then
    sed -i -E "s/^\s*NTP=.*/NTP=$ntp_servers/" "$temp_timesyncd_conf"
else
    if grep -q "\[Time\]" "$temp_timesyncd_conf"; then
	sed -i "/\[Time\]/a NTP=$ntp_servers" "$temp_timesyncd_conf"
    else
	echo -e "\n[Time]\nNTP=$ntp_servers" >> "$temp_timesyncd_conf"
    fi
fi

if ! cmp -s "$temp_timesyncd_conf" "$timesyncd_conf"; then
    cp "$temp_timesyncd_conf" "$timesyncd_conf"
    HARDN_STATUS "pass" "Updated $timesyncd_conf. Restarting systemd-timesyncd..."
    if systemctl restart systemd-timesyncd; then
	HARDN_STATUS "pass" "systemd-timesyncd restarted successfully."
	configured=true
    else
	HARDN_STATUS "error" "Failed to restart systemd-timesyncd. Manual check required."
    fi
else
    HARDN_STATUS "info" "No effective changes to $timesyncd_conf were needed."
    configured=true 
fi
rm -f "$temp_timesyncd_conf"

# Check NTP peer stratum and warn if not stratum 1 or 2
if timedatectl show-timesync --property=ServerAddress,NTP,Synchronized 2>/dev/null | grep -q "Synchronized=yes"; then
    ntpstat_output=$(ntpq -c rv 2>/dev/null)
    stratum=$(echo "$ntpstat_output" | grep -o 'stratum=[0-9]*' | cut -d= -f2)
    if [[ -n "$stratum" && "$stratum" -gt 2 ]]; then
	HARDN_STATUS "warning" "NTP is synchronized but using a high stratum peer (stratum $stratum). Consider using a lower stratum (closer to 1) for better accuracy."
    fi
fi

# Fallback to ntpd if systemd-timesyncd is not active
else
HARDN_STATUS "info" "systemd-timesyncd is not active. Checking/Configuring ntpd..."

local ntp_package_installed=false
# Ensure ntp package is installed
if is_installed ntp; then
     HARDN_STATUS "pass" "ntp package is already installed."
     ntp_package_installed=true
else
     HARDN_STATUS "info" "ntp package not found. Attempting to install..."
     # Attempt installation, check exit status
     if command -v apt >/dev/null 2>&1; then
        apt-get update >/dev/null 2>&1 && apt-get install -y ntp >/dev/null 2>&1
     elif command -v dnf >/dev/null 2>&1; then
        dnf install -y ntp >/dev/null 2>&1
     elif command -v yum >/dev/null 2>&1; then
        yum install -y ntp >/dev/null 2>&1
     fi

     if is_installed ntp; then
	 HARDN_STATUS "pass" "ntp package installed successfully."
	 ntp_package_installed=true
     else
	 HARDN_STATUS "error" "Failed to install ntp package. Skipping NTP configuration."
	 configured=false # Ensure configured is false on failure
	 # Do not return here, allow the rest of setup_security to run
     fi
fi

# Proceed with configuration ONLY if the package is installed
if [[ "$ntp_package_installed" = true ]]; then
    local ntp_conf="/etc/ntp.conf"
    # Check if the configuration file exists and is writable
    if [[ -f "$ntp_conf" ]] && [[ -w "$ntp_conf" ]]; then
	HARDN_STATUS "info" "Configuring $ntp_conf with STIG authentication..."
	
	# Create authentication keys and secure configuration
	local keys_file
	keys_file=$(create_ntp_auth_keys)
	create_secure_ntp_config "$ntp_conf" "$keys_file"
	create_ntp_monitor

	# Restart/Enable ntp service
	if systemctl enable --now ntp; then
	    HARDN_STATUS "pass" "ntp service enabled and started successfully with STIG authentication."
	    configured=true
	else
	    HARDN_STATUS "error" "Failed to enable/start ntp service. Manual check required."
	    configured=false # Set to false on service failure
	fi

	# Check NTP peer stratum and warn if not stratum 1 or 2
	sleep 10  # Give NTP time to sync
	if ntpq -p 2>/dev/null | grep -q '^\*'; then
	    stratum=$(ntpq -c rv 2>/dev/null | grep -o 'stratum=[0-9]*' | cut -d= -f2)
	    if [[ -n "$stratum" && "$stratum" -gt 2 ]]; then
		HARDN_STATUS "warning" "NTP is synchronized but using a high stratum peer (stratum $stratum). Consider using a lower stratum (closer to 1) for better accuracy."
	    fi
	fi

    else
	# This is the error path the user saw
	HARDN_STATUS "error" "NTP configuration file $ntp_conf not found or not writable after ntp package check/installation. Skipping NTP configuration."
	configured=false # Set to false if config file is missing/unwritable
    fi
fi # End if ntp_package_installed
fi # End of systemd-timesyncd else block

if [[ "$configured" = true ]]; then
HARDN_STATUS "pass" "NTP configuration attempt completed."
else
HARDN_STATUS "error" "NTP configuration failed or skipped due to errors."
fi

