#!/bin/bash

# HARDN-XDR Uninstaller
# This script removes configurations and packages installed by hardn-main.sh

# Set text colors for status messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to display status messages
uninstall_status() {
    local status="$1"
    local message="$2"
    case "$status" in
        "pass")
            echo -e "${GREEN}[PASS]${NC} $message"
            ;;
        "warning")
            echo -e "${YELLOW}[WARNING]${NC} $message"
            ;;
        "error")
            echo -e "${RED}[ERROR]${NC} $message"
            ;;
        "info")
            echo -e "${BLUE}[INFO]${NC} $message"
            ;;
        *)
            echo -e "[UNKNOWN] $message"
            ;;
    esac
}

# Display banner
echo -e "${RED}"
cat << "EOF"

   ▄█    █▄            ▄████████         ▄████████      ████████▄       ███▄▄▄▄   
  ███    ███          ███    ███        ███    ███      ███   ▀███      ███▀▀▀██▄ 
  ███    ███          ███    ███        ███    ███      ███    ███      ███   ███ 
 ▄███▄▄▄▄███▄▄        ███    ███       ▄███▄▄▄▄██▀      ███    ███      ███   ███ 
▀▀███▀▀▀▀███▀       ▀███████████      ▀▀███▀▀▀▀▀        ███    ███      ███   ███ 
  ███    ███          ███    ███      ▀███████████      ███    ███      ███   ███ 
  ███    ███          ███    ███        ███    ███      ███   ▄███      ███   ███ 
  ███    █▀           ███    █▀         ███    ███      ████████▀        ▀█   █▀  
                                        ███    ███ 

                           UNINSTALLER
EOF
echo -e "${NC}"

# Check if running as root
if [ "$(id -u)" -ne 0 ]; then
    uninstall_status "error" "This script must be run as root"
    exit 1
fi

# Confirm uninstallation
echo -e "${RED}WARNING: This script will remove HARDN-XDR configurations and packages.${NC}"
echo -e "${RED}This may leave your system less secure and could potentially cause issues.${NC}"
echo -e "${YELLOW}It is recommended to perform this on a test system or VM first.${NC}"
echo ""
read -r -p "Do you want to continue with uninstallation? (y/N): " confirm
if [[ ! "$confirm" =~ ^[yY]$ ]]; then
    echo "Uninstallation cancelled."
    exit 0
fi

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROGS_CSV_PATH="${SCRIPT_DIR}/../../progs.csv"

# Check if progs.csv exists
if [[ ! -f "${PROGS_CSV_PATH}" ]]; then
    uninstall_status "warning" "Package list file not found: ${PROGS_CSV_PATH}"
    read -r -p "Continue without package list? (y/N): " continue_without_list
    if [[ ! "$continue_without_list" =~ ^[yY]$ ]]; then
        echo "Uninstallation cancelled."
        exit 0
    fi
fi

# Detect OS details
detect_os_details() {
    if [[ -r /etc/os-release ]]; then
        source /etc/os-release
        CURRENT_DEBIAN_CODENAME="${VERSION_CODENAME}"
        CURRENT_DEBIAN_VERSION_ID="${VERSION_ID}"
    fi
}

detect_os_details
uninstall_status "info" "Detected system: Debian ${CURRENT_DEBIAN_VERSION_ID} (${CURRENT_DEBIAN_CODENAME})"



# 1. Restore system configurations
uninstall_status "info" "Restoring system configurations..."

# 1.1 Restore /etc/resolv.conf (DNS settings)
if [[ -f /etc/resolv.conf.hardn-backup ]]; then
    cp /etc/resolv.conf.hardn-backup /etc/resolv.conf
    uninstall_status "pass" "Restored original DNS configuration"
else
    # Create a default resolv.conf if backup doesn't exist
    echo "# Generated by HARDN-XDR uninstaller" > /etc/resolv.conf
    echo "nameserver 8.8.8.8" >> /etc/resolv.conf
    echo "nameserver 8.8.4.4" >> /etc/resolv.conf
    uninstall_status "warning" "Created default resolv.conf (Google DNS)"
fi

# 1.2 Restore systemd-resolved configuration if it exists
if [[ -f /etc/systemd/resolved.conf.hardn-backup ]]; then
    cp /etc/systemd/resolved.conf.hardn-backup /etc/systemd/resolved.conf
    systemctl restart systemd-resolved 2>/dev/null || true
    uninstall_status "pass" "Restored original systemd-resolved configuration"
fi

# 1.3 Remove kernel hardening parameters from sysctl
uninstall_status "info" "Removing kernel hardening parameters..."
if [[ -f /etc/sysctl.conf.hardn-backup ]]; then
    cp /etc/sysctl.conf.hardn-backup /etc/sysctl.conf
    uninstall_status "pass" "Restored original sysctl.conf"
else
    # Remove HARDN-XDR specific entries
    sed -i '/# Added by HARDN-XDR/d' /etc/sysctl.conf
    sed -i '/net.ipv4.ip_forward = 0/d' /etc/sysctl.conf
    sed -i '/net.ipv4.conf.all.send_redirects = 0/d' /etc/sysctl.conf
    sed -i '/net.ipv4.conf.default.send_redirects = 0/d' /etc/sysctl.conf
    sed -i '/net.ipv4.conf.all.accept_redirects = 0/d' /etc/sysctl.conf
    sed -i '/net.ipv4.conf.default.accept_redirects = 0/d' /etc/sysctl.conf
    sed -i '/net.ipv4.conf.all.secure_redirects = 0/d' /etc/sysctl.conf
    sed -i '/net.ipv4.conf.default.secure_redirects = 0/d' /etc/sysctl.conf
    sed -i '/net.ipv4.conf.all.log_martians = 1/d' /etc/sysctl.conf
    sed -i '/net.ipv4.conf.default.log_martians = 1/d' /etc/sysctl.conf
    sed -i '/net.ipv4.icmp_echo_ignore_broadcasts = 1/d' /etc/sysctl.conf
    sed -i '/net.ipv4.icmp_ignore_bogus_error_responses = 1/d' /etc/sysctl.conf
    sed -i '/net.ipv4.tcp_syncookies = 1/d' /etc/sysctl.conf
    sed -i '/net.ipv6.conf.all.disable_ipv6 = 1/d' /etc/sysctl.conf
    sed -i '/net.ipv6.conf.default.disable_ipv6 = 1/d' /etc/sysctl.conf
    sed -i '/fs.suid_dumpable = 0/d' /etc/sysctl.conf
    sed -i '/kernel.core_pattern = \/dev\/null/d' /etc/sysctl.conf
    uninstall_status "pass" "Removed HARDN-XDR sysctl entries"
fi

# Apply sysctl changes
sysctl -p >/dev/null 2>&1 || true

# 1.4 Remove USB security restrictions
uninstall_status "info" "Removing USB security restrictions..."
if [[ -f /etc/modprobe.d/blacklist-usb.conf ]]; then
    rm -f /etc/modprobe.d/blacklist-usb.conf
    uninstall_status "pass" "Removed USB blacklist configuration"
fi

if [[ -f /etc/udev/rules.d/99-usb-storage.rules ]]; then
    rm -f /etc/udev/rules.d/99-usb-storage.rules
    udevadm control --reload-rules && udevadm trigger
    uninstall_status "pass" "Removed USB udev rules"
fi

# 1.5 Remove network protocol blacklisting
if [[ -f /etc/modprobe.d/blacklist-rare-network.conf ]]; then
    rm -f /etc/modprobe.d/blacklist-rare-network.conf
    uninstall_status "pass" "Removed network protocol blacklist"
fi

# 1.6 Remove shared memory restrictions from fstab
sed -i '/tmpfs \/run\/shm tmpfs defaults,noexec,nosuid,nodev 0 0/d' /etc/fstab
uninstall_status "pass" "Removed shared memory restrictions from fstab"

# 1.7 Remove core dump restrictions
sed -i '/\* hard core 0/d' /etc/security/limits.conf
uninstall_status "pass" "Removed core dump restrictions from limits.conf"

# 1.8 Remove automatic security updates configuration
if [[ -f /etc/apt/apt.conf.d/50unattended-upgrades ]]; then
    rm -f /etc/apt/apt.conf.d/50unattended-upgrades
    uninstall_status "pass" "Removed automatic security updates configuration"
fi

# 1.9 Remove PAM password quality settings
if [[ -f /etc/pam.d/common-password ]]; then
    sed -i '/pam_pwquality.so retry=3 minlen=8 difok=3 ucredit=-1 lcredit=-1 dcredit=-1 ocredit=-1/d' /etc/pam.d/common-password
    uninstall_status "pass" "Removed PAM password quality settings"
fi

# 1.10 Remove cron jobs added by HARDN-XDR
uninstall_status "info" "Removing HARDN-XDR cron jobs..."
sed -i '/rkhunter/d' /etc/crontab
sed -i '/chkrootkit/d' /etc/crontab
sed -i '/debsums/d' /etc/crontab
sed -i '/aide --check/d' /etc/crontab
uninstall_status "pass" "Removed HARDN-XDR cron jobs"

# 1.11 Restore auditd configuration
if ls /etc/audit/audit.rules.bak.* >/dev/null 2>&1; then
    newest_backup=$(find /etc/audit -name "audit.rules.bak.*" -type f -printf "%T@ %p\n" | sort -nr | head -1 | cut -d' ' -f2-)
    if [[ -n "$newest_backup" ]]; then
        cp "$newest_backup" /etc/audit/audit.rules
        uninstall_status "pass" "Restored original audit rules from $newest_backup"
    fi
fi

if ls /etc/audit/auditd.conf.bak.* >/dev/null 2>&1; then
    newest_backup=$(find /etc/audit -name "auditd.conf.bak.*" -type f -printf "%T@ %p\n" | sort -nr | head -1 | cut -d' ' -f2-)
    if [[ -n "$newest_backup" ]]; then
        cp "$newest_backup" /etc/audit/auditd.conf
        uninstall_status "pass" "Restored original auditd configuration from $newest_backup"
    fi
fi

# 1.12 Restore SSH configuration
if ls /etc/ssh/sshd_config.bak.* >/dev/null 2>&1; then
    newest_backup=$(find /etc/ssh -name "sshd_config.bak.*" -type f -printf "%T@ %p\n" | sort -nr | head -1 | cut -d' ' -f2-)
    if [[ -n "$newest_backup" ]]; then
        cp "$newest_backup" /etc/ssh/sshd_config
        systemctl restart sshd 2>/dev/null || true
        uninstall_status "pass" "Restored original SSH configuration from $newest_backup"
    fi
fi

# 1.13 Restore NTP configuration
if ls /etc/systemd/timesyncd.conf.bak.* >/dev/null 2&1; then
    newest_backup=$(find /etc/systemd -name "timesyncd.conf.bak.*" -type f -printf "%T@ %p\n" | sort -nr | head -1 | cut -d' ' -f2-)
    if [[ -n "$newest_backup" ]]; then
        cp "$newest_backup" /etc/systemd/timesyncd.conf
        systemctl restart systemd-timesyncd 2>/dev/null || true
        uninstall_status "pass" "Restored original timesyncd configuration from $newest_backup"
    fi
fi

if ls /etc/ntp.conf.bak.* >/dev/null 2&1; then
    newest_backup=$(find /etc -name "ntp.conf.bak.*" -type f -printf "%T@ %p\n" | sort -nr | head -1 | cut -d' ' -f2-)
    if [[ -n "$newest_backup" ]]; then
        cp "$newest_backup" /etc/ntp.conf
        systemctl restart ntp 2>/dev/null || true
        uninstall_status "pass" "Restored original NTP configuration from $newest_backup"
    fi
fi

# 1.14 Restore file permissions
uninstall_status "info" "Restoring default file permissions..."
chmod 755 /root
chmod 644 /etc/passwd
chmod 640 /etc/shadow
chmod 644 /etc/group
chmod 640 /etc/gshadow
chmod 644 /etc/ssh/sshd_config
uninstall_status "pass" "Restored default file permissions"

# 2. Disable and stop security services
uninstall_status "info" "Disabling security services..."

# List of services to disable
services=(
    "auditd"
    "fail2ban"
    "rkhunter"
    "clamav-daemon"
    "clamav-freshclam"
    "aide"
    "suricata"
    "apparmor"
)

for service in "${services[@]}"; do
    if systemctl is-active --quiet "$service"; then
        systemctl stop "$service" 2>/dev/null
        uninstall_status "info" "Stopped $service service"
    fi

    if systemctl is-enabled --quiet "$service" 2>/dev/null; then
        systemctl disable "$service" 2>/dev/null
        uninstall_status "info" "Disabled $service service"
    fi
done

# 3. Uninstall security packages
uninstall_status "info" "Uninstalling security packages..."

# If progs.csv exists, use it to uninstall packages
if [[ -f "${PROGS_CSV_PATH}" ]]; then
    # Read the CSV file, skipping the header
    while IFS=, read -r name _ _ _ rest || [[ -n "$name" ]]; do
        # Skip comments and empty lines
        [[ -z "$name" || "$name" =~ ^[[:space:]]*# ]] && continue

        name=$(echo "$name" | xargs)

        # Skip if name is empty
        if [[ -z "$name" ]]; then
            continue
        fi

        # Check if package is installed
        if dpkg -s "$name" >/dev/null 2>&1; then
            uninstall_status "info" "Removing package: $name"
            apt-get remove -y "$name" >/dev/null 2>&1
            apt-get purge -y "$name" >/dev/null 2>&1
        fi
    done < <(tail -n +2 "${PROGS_CSV_PATH}")
else
    # Fallback list of packages to uninstall if progs.csv is not available
    packages=(
        "auditd"
        "audispd-plugins"
        "suricata"
        "fail2ban"
        "rkhunter"
        "chkrootkit"
        "unhide"
        "debsums"
        "lynis"
        "clamav"
        "clamav-daemon"
        "clamav-freshclam"
        "yara"
        "aide"
        "aide-common"
        "apparmor"
        "apparmor-profiles"
        "apparmor-utils"
        "firejail"
        "libpam-pwquality"
        "libpam-google-authenticator"
        "libpam-tmpdir"
    )

    for package in "${packages[@]}"; do
        if dpkg -s "$package" >/dev/null 2>&1; then
            uninstall_status "info" "Removing package: $package"
            apt-get remove -y "$package" >/dev/null 2>&1
            apt-get purge -y "$package" >/dev/null 2>&1
        fi
    done
fi

# 4. Remove custom installations
uninstall_status "info" "Removing custom installations..."

# 4.1 Remove chkrootkit if installed manually
if [[ -f /usr/local/sbin/chkrootkit ]]; then
    rm -f /usr/local/sbin/chkrootkit
    rm -f /usr/local/share/man/man8/chkrootkit.8 2>/dev/null || true
    mandb >/dev/null 2>&1 || true
    uninstall_status "pass" "Removed manually installed chkrootkit"
fi

# 4.2 Remove any other custom installations
# Add more custom removals here if needed

# 5. Clean up remaining files and directories
uninstall_status "info" "Cleaning up remaining files and directories..."

# 5.1 Remove configuration files
config_files=(
    "/etc/fail2ban/jail.local"
    "/etc/rkhunter.conf.local"
    "/etc/default/rkhunter"
    "/etc/clamav/clamd.conf.local"
    "/etc/clamav/freshclam.conf.local"
    "/etc/aide/aide.conf.local"
    "/etc/suricata/suricata.yaml.hardn"
)

for file in "${config_files[@]}"; do
    if [[ -f "$file" ]]; then
        rm -f "$file"
        uninstall_status "info" "Removed $file"
    fi
done

# 5.2 Remove HARDN-XDR specific directories
hardn_dirs=(
    "/var/log/hardn-xdr"
    "/etc/hardn-xdr"
    "/usr/local/share/hardn-xdr"
)

for dir in "${hardn_dirs[@]}"; do
    if [[ -d "$dir" ]]; then
        rm -rf "$dir"
        uninstall_status "info" "Removed directory $dir"
    fi
done

# 6. Clean up APT
uninstall_status "info" "Cleaning up APT..."
apt-get autoremove -y >/dev/null 2>&1
apt-get clean >/dev/null 2>&1
uninstall_status "pass" "APT cleanup completed"

# Lastly, remove the directory HARDN-XDR
# Search for the directory named HARDN-XDR and rm -rf it
echo "Locating and removing HARDN-XDR directory...${RED}"
find / -type d -name "HARDN-XDR" -exec rm -rf {} \; >/dev/null 2>&1

# 7. Final message
echo ""
echo -e "${GREEN}===========================================================${NC}"
echo -e "${GREEN}HARDN-XDR uninstallation completed${NC}"
echo -e "${YELLOW}Note: Some system changes may require a reboot to fully take effect${NC}"
echo -e "${YELLOW}It is recommended to reboot your system now${NC}"
echo -e "${GREEN}===========================================================${NC}"

# Ask for reboot
read -r -p "Would you like to reboot now? (y/N): " reboot_now
if [[ "$reboot_now" =~ ^[yY]$ ]]; then
    uninstall_status "info" "Rebooting system..."
    reboot
else
    uninstall_status "info" "Reboot skipped. Please reboot manually when convenient."
fi

exit 0
