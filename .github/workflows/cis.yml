name: cis-debian

on:
  push:
    branches: ["*"]
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: "0 4 * * 1"   # Mondays 04:00 UTC

permissions:
  contents: read

env:
  VM_RAM_MB: "2048"         # GitHub runner friendly
  VM_CPUS: "1"
  SSH_WAIT_SECS: "600"      # wait up to 10m for cloud-init/SSH
  VM_TIMEOUT: "30m"         # per-command timeout inside guest
  ART_DIR: "cis-artifacts"
  DEBIAN12_IMAGE_URL: "https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-genericcloud-amd64.qcow2"

jobs:
  debian12-cis:
    name: Debian 12 â€” CIS (OpenSCAP) + Lynis
    runs-on: ubuntu-latest
    timeout-minutes: 150

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare artifacts dir
        run: mkdir -p "${{ env.ART_DIR }}/debian-12"

      - name: Install QEMU + helpers (no KVM needed)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            qemu-system-x86 qemu-utils cloud-image-utils genisoimage \
            openssh-client curl jq ca-certificates \
            iproute2 iputils-ping xz-utils coreutils time

      - name: Write audit runner script
        shell: bash
        run: |
          cat > run_debian12_audits.sh <<'BASH'
          #!/usr/bin/env bash
          set -euo pipefail

          ART_BASE="${1:?artifact dir}"
          IMG_URL="${2:?debian12 cloud image url}"
          VM_RAM_MB="${VM_RAM_MB:-2048}"
          VM_CPUS="${VM_CPUS:-1}"
          SSH_WAIT_SECS="${SSH_WAIT_SECS:-600}"
          VM_TIMEOUT="${VM_TIMEOUT:-30m}"

          OS_NAME="debian-12"
          WORKDIR="$(pwd)/work-${OS_NAME}"
          mkdir -p "$WORKDIR" "$ART_BASE/${OS_NAME}"

          echo "[INFO] Downloading Debian 12 cloud image"
          IMG="$WORKDIR/disk.qcow2"
          curl -fsSL "$IMG_URL" -o "$WORKDIR/orig.img"
          qemu-img convert -O qcow2 "$WORKDIR/orig.img" "$IMG"
          qemu-img resize "$IMG" +6G || true

          echo "[INFO] Generating SSH key"
          SSH_DIR="$WORKDIR/ssh"; mkdir -p "$SSH_DIR"
          ssh-keygen -t ed25519 -f "$SSH_DIR/id_ed25519" -N "" -C "ci@hardn-xdr" >/dev/null

          echo "[INFO] Building cloud-init seed"
          CI_DIR="$WORKDIR/cloudinit"; mkdir -p "$CI_DIR"
          cat > "$CI_DIR/user-data" <<EOF
          #cloud-config
          users:
            - name: ci
              sudo: ALL=(ALL) NOPASSWD:ALL
              groups: sudo
              shell: /bin/bash
              ssh_authorized_keys:
                - $(cat "$SSH_DIR/id_ed25519.pub")
          package_update: true
          packages:
            - ca-certificates
          runcmd:
            - [ sh, -c, "echo 'FS ready' > /root/firstboot.txt" ]
          EOF
          cat > "$CI_DIR/meta-data" <<EOF
          instance-id: ${OS_NAME}-ci
          local-hostname: ${OS_NAME}-ci
          EOF
          cloud-localds "$WORKDIR/seed.iso" "$CI_DIR/user-data" "$CI_DIR/meta-data"

          echo "[INFO] Launching QEMU (TCG emulation; e1000 NIC)"
          SSH_PORT=$(shuf -i 2222-65000 -n 1)
          QEMU_LOG="$WORKDIR/qemu-console.log"
          qemu-system-x86_64 \
            -cpu max -smp "$VM_CPUS" -m "${VM_RAM_MB}" \
            -drive "if=virtio,file=$IMG,format=qcow2,cache=none,discard=unmap" \
            -cdrom "$WORKDIR/seed.iso" \
            -netdev user,id=n1,hostfwd=tcp::${SSH_PORT}-:22 \
            -device e1000,netdev=n1 \
            -display none -serial file:"$QEMU_LOG" -daemonize

          echo "[INFO] Waiting for SSH on port ${SSH_PORT} (<= ${SSH_WAIT_SECS}s)"
          deadline=$(( $(date +%s) + SSH_WAIT_SECS ))
          until ssh -i "$SSH_DIR/id_ed25519" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p "$SSH_PORT" ci@127.0.0.1 "echo OK" >/dev/null 2>&1; do
            if [ "$(date +%s)" -gt "$deadline" ]; then
              echo "[ERROR] VM did not become reachable via SSH"
              tail -n 200 "$QEMU_LOG" || true
              exit 1
            fi
            sleep 5
          done
          echo "[INFO] SSH reached"

          vm_ssh () {
            timeout "$VM_TIMEOUT" ssh -i "$SSH_DIR/id_ed25519" \
              -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              -p "$SSH_PORT" ci@127.0.0.1 "$@"
          }

          # ---------------------------
          # Install tools inside guest
          # ---------------------------
          echo "[INFO] Installing OpenSCAP + SSG + Lynis inside guest"
          vm_ssh 'sudo DEBIAN_FRONTEND=noninteractive apt-get update'
          vm_ssh 'sudo DEBIAN_FRONTEND=noninteractive apt-get install -y openscap-scanner scap-security-guide lynis'

          # ---------------------------
          # OpenSCAP (CIS) evaluation
          # ---------------------------
          echo "[INFO] Locating Debian 12 SCAP datastream"
          DS_PATH="$(vm_ssh "ls /usr/share/xml/scap/ssg/content/ssg-debian12-ds.xml 2>/dev/null || true")"
          if [ -z "$DS_PATH" ]; then
            DS_PATH="$(vm_ssh "ls /usr/share/xml/scap/ssg/content/ssg-*-ds.xml 2>/dev/null | grep debian || true")"
          fi
          if [ -z "$DS_PATH" ]; then
            echo "[ERROR] Could not find Debian SCAP datastream in guest."
            exit 2
          fi
          echo "[INFO] Using datastream: $DS_PATH"

          echo "[INFO] Selecting a CIS profile from datastream"
          CIS_PROFILE="$(vm_ssh "oscap info '$DS_PATH' | awk '/^ +Profile/{print \$2,\$0}' | grep -i 'cis' | awk '{print \$1}' | head -n1" || true)"
          if [ -z "$CIS_PROFILE" ]; then
            echo "[WARN] No explicit CIS profile found; falling back to 'standard' if present"
            CIS_PROFILE="$(vm_ssh "oscap info '$DS_PATH' | awk '/^ +Profile/{print \$2,\$0}' | grep -i 'standard' | awk '{print \$1}' | head -n1" || true)"
          fi
          if [ -z "$CIS_PROFILE" ]; then
            echo "[ERROR] No suitable profile found in $DS_PATH"
            exit 3
          fi
          echo "[INFO] Selected profile: $CIS_PROFILE"

          echo "[INFO] Running OpenSCAP evaluation (this can take a while)"
          vm_ssh "sudo mkdir -p /tmp/osc"
          vm_ssh "sudo oscap xccdf eval --profile '$CIS_PROFILE' --report /tmp/osc/report.html --results /tmp/osc/results.xml --results-arf /tmp/osc/results.arf --oval-results '$DS_PATH' || true"

          echo "[INFO] Collecting OpenSCAP artifacts"
          mkdir -p "$ART_BASE/${OS_NAME}"
          scp -i "$SSH_DIR/id_ed25519" -P "$SSH_PORT" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              ci@127.0.0.1:/tmp/osc/report.html "$ART_BASE/${OS_NAME}/" || true
          scp -i "$SSH_DIR/id_ed25519" -P "$SSH_PORT" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              ci@127.0.0.1:/tmp/osc/results.xml "$ART_BASE/${OS_NAME}/" || true
          scp -i "$SSH_DIR/id_ed25519" -P "$SSH_PORT" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              ci@127.0.0.1:/tmp/osc/results.arf "$ART_BASE/${OS_NAME}/" || true

          # ---------------------------
          # Lynis hardening audit
          # ---------------------------
          echo "[INFO] Running Lynis"
          vm_ssh "sudo mkdir -p /tmp/lynis-out"
          vm_ssh "sudo lynis audit system --quiet --logfile /tmp/lynis-out/lynis.log --report-file /tmp/lynis-out/lynis-report.dat || true"
          echo "[INFO] Collecting Lynis artifacts"
          mkdir -p "$ART_BASE/${OS_NAME}"
          scp -i "$SSH_DIR/id_ed25519" -P "$SSH_PORT" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              ci@127.0.0.1:/tmp/lynis-out/lynis.log "$ART_BASE/${OS_NAME}/" || true
          scp -i "$SSH_DIR/id_ed25519" -P "$SSH_PORT" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              ci@127.0.0.1:/tmp/lynis-out/lynis-report.dat "$ART_BASE/${OS_NAME}/" || true

          # Optional: print Lynis score to host logs
          SCORE="$(awk -F= '/^(hardening_index|lynis_system_score)=/{print $2}' "$ART_BASE/${OS_NAME}/lynis-report.dat" 2>/dev/null | tail -n1 || true)"
          echo "[INFO] Lynis hardening score: ${SCORE:-N/A}"

          echo "[INFO] Shutting down VM"
          vm_ssh "sudo shutdown -h now" || true
          sleep 10 || true

          echo "[INFO] Done. Artifacts saved under $ART_BASE/${OS_NAME}"
          BASH
          chmod +x run_debian12_audits.sh

      - name: Run Debian 12 CIS + Lynis
        run: |
          ./run_debian12_audits.sh "${{ env.ART_DIR }}" "${{ env.DEBIAN12_IMAGE_URL }}"

      - name: Upload all artifacts (OpenSCAP + Lynis)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debian-12-cis-and-lynis
          path: "${{ env.ART_DIR }}/debian-12"