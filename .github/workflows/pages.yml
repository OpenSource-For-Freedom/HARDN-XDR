name: Deploy GitHub Pages

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 5 * * 5'  # Weekly traffic badge updates (Fridays at 5 AM UTC)
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Check for Node.js project
        id: check_node
        run: |
          if [ -f package.json ]; then
            echo "has_package_json=true" >> $GITHUB_OUTPUT
            echo "Node.js project detected"
          else
            echo "has_package_json=false" >> $GITHUB_OUTPUT
            echo "No package.json found, creating basic setup"
            cat <<EOF > package.json
          {
            "name": "hardn-xdr-site",
            "version": "1.0.0",
            "description": "HARDN-XDR Documentation Site",
            "scripts": {
              "build": "echo 'No build script needed for static site' && mkdir -p docs && cp -r . docs/ || true"
            },
            "dependencies": {}
          }
          EOF
          fi

      - name: Install dependencies
        if: steps.check_node.outputs.has_package_json == 'true'
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install --no-package-lock
          fi

      - name: Generate traffic badges
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p public/badges docs/badges

          # Generate traffic badge JSONs using GitHub API
          VIEW_JSON=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/traffic/views || echo '{"count": 0, "uniques": 0}')

          CLONE_JSON=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/traffic/clones || echo '{"count": 0, "uniques": 0}')

          VIEW_COUNT=$(echo "$VIEW_JSON" | jq -r '.count // 0')
          VIEW_UNIQUES=$(echo "$VIEW_JSON" | jq -r '.uniques // 0')
          CLONE_COUNT=$(echo "$CLONE_JSON" | jq -r '.count // 0')
          CLONE_UNIQUES=$(echo "$CLONE_JSON" | jq -r '.uniques // 0')

          # Determine badge colors based on traffic
          if [ "$VIEW_COUNT" -ge 200 ]; then VIEW_COLOR="green"
          elif [ "$VIEW_COUNT" -ge 50 ]; then VIEW_COLOR="orange"
          else VIEW_COLOR="red"
          fi

          if [ "$CLONE_COUNT" -ge 100 ]; then CLONE_COLOR="blue"
          elif [ "$CLONE_COUNT" -ge 20 ]; then CLONE_COLOR="yellow"
          else CLONE_COLOR="red"
          fi

          # Create badge JSON files for shields.io
          cat <<EOF > docs/badges/traffic-views.json
          {
            "schemaVersion": 1,
            "label": "views",
            "message": "$VIEW_COUNT / $VIEW_UNIQUES",
            "color": "$VIEW_COLOR"
          }
          EOF

          cat <<EOF > docs/badges/traffic-clones.json
          {
            "schemaVersion": 1,
            "label": "clones",
            "message": "$CLONE_COUNT / $CLONE_UNIQUES",
            "color": "$CLONE_COLOR"
          }
          EOF

          echo "Generated traffic badges: Views($VIEW_COUNT/$VIEW_UNIQUES), Clones($CLONE_COUNT/$CLONE_UNIQUES)"

      - name: Build site
        run: |
          # Create docs directory if it doesn't exist
          mkdir -p docs

          # If we have a Next.js or other build process
          if [ -f package.json ] && grep -q '"build"' package.json; then
            echo "Running npm build script..."
            npm run build || echo "Build script failed or not found, continuing with static copy"
          fi

          # Copy main files to docs if docs is empty or doesn't have an index
          if [ ! -f docs/index.html ] && [ ! -f docs/README.md ]; then
            echo "Copying main files to docs directory..."
            # Copy important files but exclude unnecessary ones
            find . -maxdepth 1 -name "*.md" -o -name "*.html" -o -name "*.css" -o -name "*.js" | while read file; do
              cp "$file" docs/ 2>/dev/null || true
            done

            # If no index.html, create one from README.md if it exists
            if [ ! -f docs/index.html ] && [ -f docs/README.md ]; then
              echo "Creating index.html from README.md..."
              cat > docs/index.html <<EOF
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <title>HARDN-XDR</title>
            <style>
              body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
              pre { background: #f5f5f5; padding: 15px; border-radius: 5px; overflow-x: auto; }
              code { background: #f5f5f5; padding: 2px 4px; border-radius: 3px; }
            </style>
          </head>
          <body>
            <div id="content"></div>
            <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
            <script>
              fetch('README.md').then(r => r.text()).then(text => {
                document.getElementById('content').innerHTML = marked.parse(text);
              });
            </script>
          </body>
          </html>
          EOF
            fi
          fi

      - name: Finalize docs
        run: |
          # Ensure badges directory exists
          mkdir -p docs/badges

          # Create .nojekyll file for GitHub Pages
          touch docs/.nojekyll

          # Create a simple 404 page if none exists
          if [ ! -f docs/404.html ]; then
            cat > docs/404.html <<EOF
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <title>404 - Page Not Found</title>
          </head>
          <body>
            <h1>404 - Page Not Found</h1>
            <p><a href="/">Return to Home</a></p>
          </body>
          </html>
          EOF
          fi

          echo "Site structure:"
          ls -la docs/
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4