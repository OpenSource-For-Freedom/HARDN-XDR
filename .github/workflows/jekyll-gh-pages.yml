# Jekyll + Next.js hybrid workflow for GitHub Pages
name: Deploy Jekyll -> Next.js

on:
  push:
    branches: ["main"]
  schedule:
    - cron: '0 5 * * 5'  # Weekly traffic badge updates (Fridays at 5 AM UTC)
  workflow_dispatch:

permissions:
  contents: write   # Needed so CI can open PRs
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 1) Ensure package-lock.json matches package.json
  lockfile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Regenerate lockfile
        run: |
          set -e
          if [ ! -f package.json ]; then
            echo "ERROR: package.json not found. Cannot generate lockfile."
            exit 1
          fi

          echo "Node: $(node -v) | npm: $(npm -v)"
          rm -rf node_modules package-lock.json
          npm cache verify

          # Generate lockfile from package.json
          npm install --package-lock-only

          # Sanity check
          rm -rf node_modules
          npm ci

      - name: Create Pull Request with updated lockfile
        uses: peter-evans/create-pull-request@v6
        with:
          branch: chore/update-lockfile
          commit-message: "chore(lock): sync package-lock.json with package.json"
          title: "chore(lock): sync package-lock.json with package.json"
          body: |
            This PR updates **package-lock.json** to match the current **package.json**.
            Generated automatically by CI.
          labels: dependencies
          token: ${{ secrets.GITHUB_TOKEN }}

  # 2) Build job (runs only on main branch pushes, after lockfile is correct)
  build:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect Node/Next presence
        run: |
          needs_node=false
          next_enabled=false
          if [ -f package.json ] || [ -f package-lock.json ]; then needs_node=true; fi
          if [ -d "pages" ] || [ -d "components" ] || [ -f "next.config.js" ]; then next_enabled=true; fi
          echo "NEEDS_NODE=$needs_node" >> "$GITHUB_ENV"
          echo "NEXT_JS_ENABLED=$next_enabled" >> "$GITHUB_ENV"

      - name: Setup Node.js
        if: env.NEEDS_NODE == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package.json
            package-lock.json

      - name: Install Node.js dependencies
        if: env.NEEDS_NODE == 'true'
        run: npm ci

      - name: Verify Next.js CLI
        if: env.NEXT_JS_ENABLED == 'true'
        run: npx --yes next --version

      - name: Generate traffic badges
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p _site/badges
          VIEW_JSON=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/traffic/views || echo '{"count":0,"uniques":0}')
          CLONE_JSON=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/traffic/clones || echo '{"count":0,"uniques":0}')
          VIEW_COUNT=$(echo "$VIEW_JSON" | jq -r '.count // 0')
          VIEW_UNIQUES=$(echo "$VIEW_JSON" | jq -r '.uniques // 0')
          CLONE_COUNT=$(echo "$CLONE_JSON" | jq -r '.count // 0')
          CLONE_UNIQUES=$(echo "$CLONE_JSON" | jq -r '.uniques // 0')

          if [ "$VIEW_COUNT" -ge 200 ]; then VIEW_COLOR="green"
          elif [ "$VIEW_COUNT" -ge 50 ]; then VIEW_COLOR="orange"
          else VIEW_COLOR="red"; fi

          if [ "$CLONE_COUNT" -ge 100 ]; then CLONE_COLOR="blue"
          elif [ "$CLONE_COUNT" -ge 20 ]; then CLONE_COLOR="yellow"
          else CLONE_COLOR="red"; fi

          cat > _site/badges/traffic-views.json <<EOF
          { "schemaVersion":1,"label":"views","message":"$VIEW_COUNT / $VIEW_UNIQUES","color":"$VIEW_COLOR" }
          EOF

          cat > _site/badges/traffic-clones.json <<EOF
          { "schemaVersion":1,"label":"clones","message":"$CLONE_COUNT / $CLONE_UNIQUES","color":"$CLONE_COLOR" }
          EOF

      - name: Build Next.js (static export)
        id: nextexport
        if: env.NEXT_JS_ENABLED == 'true'
        run: |
          set -e
          npm run export
          mkdir -p _site
          cp -r out/* _site/ || true
          touch _site/.nojekyll
          echo "exported=true" >> "$GITHUB_OUTPUT"

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Build with Jekyll
        if: steps.nextexport.outputs.exported != 'true'
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

      - name: Post-process site
        run: |
          mkdir -p _site/badges
          if [ -d "assets/next" ]; then cp -r assets/next/* _site/ || true; fi
          ls -la _site/ || true

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # 3) Deploy job
  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4