# Jekyll + Next.js hybrid workflow for GitHub Pages
name: Deploy Jekyll with Next.js Integration

on:
  push:
    branches: ["main"]
  schedule:
    - cron: '0 5 * * 5'  # Weekly traffic badge updates (Fridays at 5 AM UTC)
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package.json
            package-lock.json
        continue-on-error: false

              - name: Setup Next.js if components exist
        run: |
          # Check if we have Next.js components
          if [ -d "pages" ] || [ -d "components" ] || [ -f "next.config.js" ]; then
            echo "Next.js components detected, ensuring proper setup..."

            # Create package.json if it doesn't exist
            if [ ! -f package.json ]; then
              echo "Creating package.json for Next.js build..."
              cat <<EOF > package.json
          {
            "name": "hardn-xdr-platform",
            "version": "1.0.0",
            "description": "HARDN-XDR Security Platform",
            "private": true,
            "scripts": {
              "dev": "next dev",
              "build": "next build",
              "export": "next build && next export",
              "start": "next start"
            },
            "dependencies": {
              "next": "^14.0.4",
              "react": "^18.2.0",
              "react-dom": "^18.2.0"
            },
            "devDependencies": {
              "@types/node": "^20.10.0",
              "@types/react": "^18.2.42",
              "@types/react-dom": "^18.2.17",
              "typescript": "^5.3.3"
            }
          }
          EOF
            fi

            echo "NEXT_JS_ENABLED=true" >> $GITHUB_ENV
          else
            echo "No Next.js components found, skipping Next.js setup..."
            echo "NEXT_JS_ENABLED=false" >> $GITHUB_ENV
          fi

      - name: Install Node.js dependencies
        if: env.NEXT_JS_ENABLED == 'true'
        run: |
          echo "Installing Node.js dependencies..."

          # Check if package-lock.json exists, use appropriate install method
          if [ -f "package-lock.json" ]; then
            echo "Lock file found, using npm ci for reproducible install..."
            npm ci
          else
            echo "No lock file found, using npm install..."
            npm install --no-package-lock
          fi

          # Verify installation
          echo "Verifying Next.js installation..."
          npx next --version || echo "Next.js version check failed, but continuing..."

      - name: Generate traffic badges
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p _site/badges

          # Generate traffic badge JSONs using GitHub API
          VIEW_JSON=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/traffic/views || echo '{"count": 0, "uniques": 0}')

          CLONE_JSON=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/traffic/clones || echo '{"count": 0, "uniques": 0}')

          VIEW_COUNT=$(echo "$VIEW_JSON" | jq -r '.count // 0')
          VIEW_UNIQUES=$(echo "$VIEW_JSON" | jq -r '.uniques // 0')
          CLONE_COUNT=$(echo "$CLONE_JSON" | jq -r '.count // 0')
          CLONE_UNIQUES=$(echo "$CLONE_JSON" | jq -r '.uniques // 0')

          # Determine badge colors
          if [ "$VIEW_COUNT" -ge 200 ]; then VIEW_COLOR="green"
          elif [ "$VIEW_COUNT" -ge 50 ]; then VIEW_COLOR="orange"
          else VIEW_COLOR="red"
          fi

          if [ "$CLONE_COUNT" -ge 100 ]; then CLONE_COLOR="blue"
          elif [ "$CLONE_COUNT" -ge 20 ]; then CLONE_COLOR="yellow"
          else CLONE_COLOR="red"
          fi

          # Create badge JSON files
          cat <<EOF > _site/badges/traffic-views.json
          {
            "schemaVersion": 1,
            "label": "views",
            "message": "$VIEW_COUNT / $VIEW_UNIQUES",
            "color": "$VIEW_COLOR"
          }
          EOF

          cat <<EOF > _site/badges/traffic-clones.json
          {
            "schemaVersion": 1,
            "label": "clones", 
            "message": "$CLONE_COUNT / $CLONE_UNIQUES",
            "color": "$CLONE_COLOR"
          }
          EOF

              - name: Build Next.js components
        if: env.NEXT_JS_ENABLED == 'true'
        run: |
          echo "Building Next.js components..."

          # Build Next.js with error handling
          if npm run export; then
            echo "✅ Next.js build successful"

            # Copy Next.js build output
            if [ -d "out" ]; then
              echo "Copying Next.js static export to _site directory..."
              mkdir -p _site
              cp -r out/* _site/ || true

              # Create .nojekyll to prevent GitHub Pages Jekyll processing
              touch _site/.nojekyll

              echo "Next.js static files copied successfully"
              ls -la _site/
            else
              echo "⚠️  Next.js out directory not found"
            fi
          else
            echo "❌ Next.js build failed, continuing with Jekyll only..."
            echo "NEXT_JS_BUILD_FAILED=true" >> $GITHUB_ENV
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Build with Jekyll
        if: env.NEXT_JS_ENABLED == 'false' || env.NEXT_JS_BUILD_FAILED == 'true'
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

              - name: Skip Jekyll (using Next.js static export)
        if: env.NEXT_JS_ENABLED == 'true' && env.NEXT_JS_BUILD_FAILED != 'true'
        run: |
          echo "Using Next.js static export instead of Jekyll build"
          echo "Site is already built in _site directory from Next.js export"

      - name: Post-process site
        run: |
          # Ensure badges directory exists in final site
          mkdir -p _site/badges

          # Copy any additional assets
          if [ -d "assets/next" ]; then
            cp -r assets/next/* _site/ || true
          fi

          echo "Site build completed"
          ls -la _site/

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
