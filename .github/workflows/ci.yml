name: ci

on:
  push:
    branches: ["main", "main-patch"]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch tags
        run: git fetch --tags

      - name: Get latest v1.1.x tag
        id: get_tag
        run: |
          latest_tag=$(git tag -l "v1.1.*" --sort=-v:refname | head -n 1)
          [ -z "$latest_tag" ] && latest_tag="v1.1.0"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Extract patch version and bump
        id: bump
        run: |
          tag="${{ steps.get_tag.outputs.latest_tag }}"
          patch=${tag##*.}
          new_patch=$((patch + 1))
          new_tag="v1.1.$new_patch"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Install deps and tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev debhelper fakeroot build-essential devscripts lintian gnupg whiptail

      - name: Ensure hardn-xdr exists and is executable
        run: |
          if [ ! -f hardn-xdr ]; then
            echo "ERROR: hardn-xdr not found in project root. Build or copy it before packaging."
            exit 1
          fi
          chmod +x hardn-xdr

      - name: Set executable permissions
        run: |
          chmod +x debian/postinst hardn-xdr src/setup/hardn-main.sh
          find src/setup/modules -type f -name "*.sh" -exec chmod +x {} \;

      - name: Update changelog for ${{ matrix.arch }}
        run: |
          raw_tag="${{ steps.bump.outputs.new_tag }}"
          version="${raw_tag#v}"
          export DEBCHANGE_RELEASE_DATE="$(date -R)"
          arch="${{ matrix.arch }}"
          if [ ! -f debian/changelog ]; then touch debian/changelog; fi
          dch --newversion "$version" \
              "Automated release $version for architecture: $arch." \
              --distribution unstable \
              --force-distribution
          dch --release --force-distribution ""

      - name: Build package for ${{ matrix.arch }}
        env:
          DEBIAN_FRONTEND: noninteractive
          SKIP_WHIPTAIL: 1
        run: |
          dpkg-buildpackage -us -uc
          sudo apt install -f -y

      - name: Rename .deb
        id: rename
        run: |
          raw_tag="${{ steps.bump.outputs.new_tag }}"
          version="${raw_tag#v}"
          deb_file=$(ls ../*.deb | head -n 1)
          new_name="hardn_${version}_${{ matrix.arch }}.deb"
          mv "$deb_file" "$new_name"
          mkdir -p release_assets/deb-${{ matrix.arch }}
          mv "$new_name" release_assets/deb-${{ matrix.arch }}/
          echo "deb_file=release_assets/deb-${{ matrix.arch }}/$new_name" >> $GITHUB_OUTPUT

      - name: Upload .deb
        uses: actions/upload-artifact@v4
        with:
          name: deb-${{ matrix.arch }}
          path: ${{ steps.rename.outputs.deb_file }}

  test-deployment:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    outputs:
      passed: ${{ steps.simulate.outputs.passed }}
    steps:
      - name: Register QEMU emulation
        uses: docker/setup-qemu-action@v3

      - name: Check raw binfmt version
        run: |
          docker run --rm --privileged tonistiigi/binfmt:latest --version || true

      - name: Download built .deb for ${{ matrix.arch }}
        uses: actions/download-artifact@v4
        with:
          name: deb-${{ matrix.arch }}
          path: release_assets/deb-${{ matrix.arch }}

      - name: Simulate full HARDN deployment
        id: simulate
        run: |
          echo "Simulating full install for ${{ matrix.arch }}"
          cp release_assets/deb-${{ matrix.arch }}/*.deb ./hardn.deb
          mkdir -p ./logbundle/hardn-ci

          docker run --rm -i --platform linux/${{ matrix.arch }} \
            --privileged \
            -e SKIP_WHIPTAIL=1 \
            -e DEBIAN_FRONTEND=noninteractive \
            -e CI=true \
            -v "$(pwd)/hardn.deb:/tmp/hardn.deb" \
            -v "$(pwd)/logbundle:/var/log/" \
            debian:stable-slim bash -euxo pipefail -c '
              apt-get update
              apt-get install -y sudo bash gnupg curl whiptail coreutils zip
              dpkg -i /tmp/hardn.deb || true
              apt-get install -f -y
              chmod +x /usr/lib/hardn-xdr/src/setup/modules/*.sh || true
              echo "Running HARDN-XDR"
              /usr/bin/hardn-xdr || echo "HARDN-XDR exited"

              echo "Running modules"
              fail_count=0
              for script in /usr/lib/hardn-xdr/src/setup/modules/*.sh; do
                name=$(basename "$script")
                echo "Running: $name" | tee -a /var/log/hardn-ci/modules.log
                bash "$script" >> /var/log/hardn-ci/$name.log 2>&1 || {
                  echo "[FAIL] $name failed" | tee -a /var/log/hardn-ci/modules.log
                  fail_count=$((fail_count+1))
                }
              done
              echo "Total failures: $fail_count" | tee -a /var/log/hardn-ci/modules.log
              echo "$fail_count" > /var/log/hardn-ci/fail_count.txt
              chmod -R a+r /var/log/hardn-ci || true
              chown -R 1000:1000 /var/log/hardn-ci || true
            '

          mkdir -p release_assets/hardn-logs-${{ matrix.arch }}
          cp -r ./logbundle/* release_assets/hardn-logs-${{ matrix.arch }}/ || true

          echo "passed=false" >> $GITHUB_OUTPUT
          if [ ! -s release_assets/hardn-logs-${{ matrix.arch }}/hardn-ci/fail_count.txt ] || grep -q '^0$' release_assets/hardn-logs-${{ matrix.arch }}/hardn-ci/fail_count.txt; then
            echo "passed=true" >> $GITHUB_OUTPUT
          fi

      - name: Zip logs
        run: |
          mkdir -p release_assets/hardn-logs-zip
          zip -r release_assets/hardn-logs-zip/hardn_logs_bundle_${{ matrix.arch }}.zip release_assets/hardn-logs-${{ matrix.arch }}

      - name: Upload zipped logs
        uses: actions/upload-artifact@v4
        with:
          name: hardn-logs-zip-${{ matrix.arch }}
          path: release_assets/hardn-logs-zip/hardn_logs_bundle_${{ matrix.arch }}.zip

  release:
    needs: [build-and-test, test-deployment]
    if: needs.test-deployment.outputs.passed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download all release assets
        uses: actions/download-artifact@v4
        with:
          path: release_assets

      - name: Copy logo into release
        run: |
           mkdir -p release_assets
           cp "docs/assets/sig_logo.png" release_assets/sig_logo.png

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          tag="${{ needs.build-and-test.outputs.new_tag }}"
          gh release create "$tag" \
            release_assets/deb-amd64/*.deb \
            release_assets/deb-arm64/*.deb \
            release_assets/hardn-logs-zip/hardn_logs_bundle_*.zip \
            release_assets/sig_logo.png \
            --title "Release $tag" \
            --notes "![HARDN-XDR Logo](HARDN-XDR/docs/assets/sig_logo.png)\n\nAutomated release for HARDN-XDR"
