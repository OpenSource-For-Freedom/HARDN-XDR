name: ci

on:
  push:
    branches: ["main", "main-patch"]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch tags
        run: git fetch --tags

      - name: Get latest v1.1.x tag
        id: get_tag
        run: |
          latest_tag=$(git tag -l "v1.1.*" --sort=-v:refname | head -n 1)
          [ -z "$latest_tag" ] && latest_tag="v1.1.0"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Extract patch version and bump
        id: bump
        run: |
          tag="${{ steps.get_tag.outputs.latest_tag }}"
          patch=${tag##*.}
          new_patch=$((patch + 1))
          new_tag="v1.1.$new_patch"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Install deps and tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev debhelper fakeroot build-essential devscripts lintian gnupg whiptail

      - name: Ensure hardn-xdr exists and is executable
        run: |
          if [ ! -f hardn-xdr ]; then
            echo "ERROR: hardn-xdr not found in project root. Build or copy it before packaging."
            exit 1
          fi
          chmod +x hardn-xdr

      - name: Set executable permissions
        run: |
          chmod +x debian/postinst hardn-xdr src/setup/hardn-main.sh
          find src/setup/modules -type f -name "*.sh" -exec chmod +x {} \;

      - name: Update changelog for ${{ matrix.arch }}
        run: |
          raw_tag="${{ steps.bump.outputs.new_tag }}"
          version="${raw_tag#v}"
          export DEBCHANGE_RELEASE_DATE="$(date -R)"
          arch="${{ matrix.arch }}"
          if [ ! -f debian/changelog ]; then touch debian/changelog; fi
          dch --newversion "$version" \
              "Automated release $version for architecture: $arch." \
              --distribution unstable \
              --force-distribution
          dch --release --force-distribution ""

      - name: Build package for ${{ matrix.arch }}
        env:
          DEBIAN_FRONTEND: noninteractive
          SKIP_WHIPTAIL: 1
        run: |
          dpkg-buildpackage -us -uc
          sudo apt install -f -y

      - name: Rename .deb
        id: rename
        run: |
          raw_tag="${{ steps.bump.outputs.new_tag }}"
          version="${raw_tag#v}"
          deb_file=$(ls ../*.deb | head -n 1)
          new_name="hardn_${version}_${{ matrix.arch }}.deb"
          mv "$deb_file" "$new_name"
          echo "deb_file=$new_name" >> $GITHUB_OUTPUT

      - name: Upload .deb
        uses: actions/upload-artifact@v4
        with:
          name: deb-${{ matrix.arch }}
          path: ${{ steps.rename.outputs.deb_file }}

  test-deployment:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    outputs:
      fail_log_path: ${{ steps.collect-logs.outputs.log_path }}
    steps:
      - name: Register QEMU emulation
        uses: docker/setup-qemu-action@v3

      - name: Download built .deb for ${{ matrix.arch }}
        uses: actions/download-artifact@v4
        with:
          name: deb-${{ matrix.arch }}
          path: .

      - name: Simulate full HARDN deployment
        id: simulate
        run: |
          echo "Simulating full install for ${{ matrix.arch }}"
          cp hardn_*.deb ./hardn.deb
          mkdir -p ./logbundle

          docker run --rm -i --platform linux/${{ matrix.arch }} \
            -e SKIP_WHIPTAIL=1 \
            -e DEBIAN_FRONTEND=noninteractive \
            -e CI=true \
            -v "$(pwd)/hardn.deb:/tmp/hardn.deb" \
            debian:stable-slim bash -euxo pipefail -c '
              apt-get update
              apt-get install -y sudo bash gnupg curl whiptail coreutils
              dpkg -i /tmp/hardn.deb || true
              apt-get install -f -y

              mkdir -p /var/log/hardn-ci
              echo "--- RUNNING HARDN-XDR ---"
              /usr/bin/hardn-xdr || echo "HARDN-XDR exited"

              echo "--- SIMULATING MODULE EXECUTION ---"
              fail_count=0
              for script in /usr/lib/hardn-xdr/src/setup/modules/*.sh; do
                name=$(basename "$script")
                echo "---- RUNNING: $name ----" | tee -a /var/log/hardn-ci/modules.log
                bash "$script" >> /var/log/hardn-ci/$name.log 2>&1 || {
                  echo "[FAIL] $name failed" | tee -a /var/log/hardn-ci/modules.log
                  fail_count=$((fail_count+1))
                }
              done
              echo "Total failures: $fail_count" | tee -a /var/log/hardn-ci/modules.log
              cp -r /var/log/hardn-ci /tmp/
            '
          mv ./hardn.deb logbundle/
          echo "log_path=logbundle" >> $GITHUB_OUTPUT

      - name: Upload logs and results
        id: collect-logs
        uses: actions/upload-artifact@v4
        with:
          name: full-system-test-logs-${{ matrix.arch }}
          path: |
            logbundle

      - name: Print main output to job log
        if: always()
        run: |
          cat logbundle/hardn-ci/modules.log || true

  report-failures:
    needs: test-deployment
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download logs
        uses: actions/download-artifact@v4
        with:
          name: full-system-test-logs-amd64
          path: logs

      - name: Parse failed modules and open/update issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          issue_title="❌ HARDN-XDR Module Failures Detected"
          body="## Module Failures Report\n\nThe following modules failed:\n\n"

          fail_modules=$(grep "\[FAIL\]" logs/hardn-ci/modules.log | cut -d' ' -f2)
          count=0

          for module in $fail_modules; do
            body+="### ❌ $module\n"
            body+="\`\`\`\n"
            tail -n 20 logs/hardn-ci/$module.log >> temp.log || echo "No details" >> temp.log
            body+="$(cat temp.log)\n"
            body+="\`\`\`\n"
            count=$((count+1))
          done

          if [ "$count" -gt 0 ]; then
            issue_number=$(gh issue list --state open --limit 1 --search "$issue_title" --json number -q '.[0].number' || echo "")
            if [ -n "$issue_number" ]; then
              gh issue comment "$issue_number" --body "$body"
            else
              gh issue create --title "$issue_title" --body "$body"
            fi
          else
            echo "No failed modules detected."
          fi