name: ci

on:
  push:
    branches: ["*"]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Fetch tags
        run: |
          git fetch --tags

      - name: Get latest v1.1.x tag
        id: get_tag
        run: |
          latest_tag=$(git tag -l "v1.1.*" --sort=-v:refname | head -n 1)
          [ -z "$latest_tag" ] && latest_tag="v1.1.0"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Extract patch version and find next available tag
        id: bump
        run: |
          tag="${{ steps.get_tag.outputs.latest_tag }}"
          patch=${tag##*.}
          new_patch=$((patch + 1))
          new_tag="v1.1.$new_patch"
          max_attempts=10
          attempt=0
          while git rev-parse "$new_tag" >/dev/null 2>&1 && [ $attempt -lt $max_attempts ]; do
            new_patch=$((new_patch + 1))
            new_tag="v1.1.$new_patch"
            attempt=$((attempt + 1))
          done
          if [ $attempt -ge $max_attempts ]; then
            echo "ERROR: Could not find available tag after $max_attempts attempts"
            exit 1
          fi
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Install build deps (incl. devscripts)
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev debhelper fakeroot build-essential devscripts lintian gnupg whiptail

      - name: Ensure hardn-xdr exists and is executable
        run: |
          if [ ! -f hardn-xdr ]; then
            echo "ERROR: hardn-xdr not found in project root. Build or copy it before packaging."
            exit 1
          fi
          chmod +x hardn-xdr

      - name: Set executable permissions
        run: |
          chmod +x hardn-xdr src/setup/hardn-main.sh src/setup/hardn-common.sh
          chmod +x debian/postinst
          find src/setup/modules -type f -name "*.sh" -exec chmod +x {} \;

      - name: Generate debian/changelog for this build
        run: |
          raw_tag="${{ steps.bump.outputs.new_tag }}"
          version="${raw_tag#v}"
          mkdir -p debian
          # Use a pipe-prefixed heredoc and strip it so header begins at column 0 in the file.
          sed -e 's/^ *|//' > debian/changelog <<'EOF'
          |hardn (${version}) unstable; urgency=medium
          |
          |  * Automated release ${version} from CI
          |
          | -- Tim Burns <control@cybersynapse.ro>  DATE_RFC2822
          |
          EOF
          sed -i "s/DATE_RFC2822/$(date -R)/" debian/changelog
          echo "==== debian/changelog ===="
          nl -ba debian/changelog | sed -n '1,20p'

      - name: Build package for ${{ matrix.arch }} - Architecture all
        env:
          DEBIAN_FRONTEND: noninteractive
          SKIP_WHIPTAIL: 1
        run: |
          dpkg-buildpackage -us -uc
          sudo apt-get install -f -y

      - name: Lint package
        run: |
          deb_file=$(ls ../*.deb | head -n 1)
          lintian "$deb_file" || echo "Lintian warnings found, but continuing..."

      - name: Prepare release assets for ${{ matrix.arch }} (stable aliases only)
        run: |
          deb_file=$(ls ../*.deb | head -n 1)
          mkdir -p release_assets/deb-${{ matrix.arch }}
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            cp "$deb_file" "release_assets/deb-${{ matrix.arch }}/hardn_latest_amd64.deb"
          else
            cp "$deb_file" "release_assets/deb-${{ matrix.arch }}/hardn_latest_arm64.deb"
          fi

      - name: Upload alias .deb for ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: deb-${{ matrix.arch }}
          path: release_assets/deb-${{ matrix.arch }}/*.deb

  test-deployment:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
        distro: [debian, ubuntu, PakOS]
        deployment_type: [container, vm-simulation]
    steps:
      - name: Register QEMU emulation
        uses: docker/setup-qemu-action@v3

      - name: Check raw binfmt version
        run: |
          docker run --rm --privileged tonistiigi/binfmt:latest --version || true

      - name: Download built .deb for ${{ matrix.arch }}
        uses: actions/download-artifact@v5
        with:
          name: deb-${{ matrix.arch }}
          path: release_assets/deb-${{ matrix.arch }}

      - name: Enhanced headless deployment test for ${{ matrix.deployment_type }}
        run: |
          echo "Testing ${{ matrix.deployment_type }} for ${{ matrix.arch }} on ${{ matrix.distro }}"
          cp release_assets/deb-${{ matrix.arch }}/*.deb ./hardn.deb
          mkdir -p ./logbundle/hardn-ci-${{ matrix.distro }}-${{ matrix.deployment_type }}
          chmod 777 ./logbundle ./logbundle/hardn-ci-${{ matrix.distro }}-${{ matrix.deployment_type }}

          if [ "${{ matrix.distro }}" = "ubuntu" ]; then
            BASE_IMAGE="ubuntu:24.04"
          elif [ "${{ matrix.distro }}" = "PakOS" ]; then
            BASE_IMAGE="pakos/pakos:latest"
          else
            BASE_IMAGE="debian:stable-slim"
          fi

          if [ "${{ matrix.distro }}" = "PakOS" ]; then
            if ! docker pull --platform linux/${{ matrix.arch }} pakos/pakos:latest 2>/dev/null; then
              echo "Warning: PakOS image unavailable; falling back to Debian"
              BASE_IMAGE="debian:stable-slim"
            fi
          fi

          docker run --rm -i --platform linux/${{ matrix.arch }} \
            --privileged \
            -e CI=true \
            -e ARCH=${{ matrix.arch }} \
            -e DSTRO=${{ matrix.distro }} \
            -e DTYPE=${{ matrix.deployment_type }} \
            -v "$(pwd)/hardn.deb:/tmp/hardn.deb" \
            -v "$(pwd)/logbundle:/var/log/" \
            "$BASE_IMAGE" bash -euxo pipefail -c '
              for attempt in 1 2 3; do
                echo "Attempt $attempt: apt-get update"
                if apt-get update; then break; fi
                if [ $attempt -eq 3 ]; then
                  echo "WARN: using possibly stale apt cache"
                else
                  sleep 30
                fi
              done

              apt-get install -f -y
              dpkg -i /tmp/hardn.deb || true
              apt-get install -f -y

              chmod +x /usr/lib/hardn-xdr/src/setup/modules/*.sh || true

              LOG_DIR="/var/log/hardn-ci-${DSTRO}-${DTYPE}"
              mkdir -p "$LOG_DIR"
              chmod 777 "$LOG_DIR"

              echo "=== Environment ===" | tee -a "$LOG_DIR/environment.log"
              echo "CI: $CI" | tee -a "$LOG_DIR/environment.log"
              echo "DEPLOYMENT_TYPE: ${DTYPE}" | tee -a "$LOG_DIR/environment.log"
              echo "TTY: $(tty || echo none)" | tee -a "$LOG_DIR/environment.log"
              echo "DISPLAY: ${DISPLAY:-none}" | tee -a "$LOG_DIR/environment.log"

              echo "=== Main HARDN-XDR Execution ===" | tee -a "$LOG_DIR/hardn-xdr.log"
              timeout 300 /usr/bin/hardn-xdr >> "$LOG_DIR/hardn-xdr.log" 2>&1 || echo "HARDN-XDR finished with status: $?"

              echo "=== Module Testing ===" | tee -a "$LOG_DIR/modules.log"
              fail_count=0
              total_count=0
              skip_count=0
              critical_failures=0

              PRIORITY_MODULES="sshd.sh auditd.sh ufw.sh fail2ban.sh kernel_sec.sh"
              for module in $PRIORITY_MODULES; do
                module_path="/usr/lib/hardn-xdr/src/setup/modules/$module"
                if [ -f "$module_path" ]; then
                  total_count=$((total_count+1))
                  echo "[$total_count] Testing priority module: $module" | tee -a "$LOG_DIR/modules.log"
                  if timeout 300 bash "$module_path" > "$LOG_DIR/$module.log" 2>&1; then
                    echo "[$total_count] PASS: $module" | tee -a "$LOG_DIR/modules.log"
                  else
                    exit_code=$?
                    echo "[$total_count] FAIL: $module (exit code: $exit_code)" | tee -a "$LOG_DIR/modules.log"
                    fail_count=$((fail_count+1))
                    critical_failures=$((critical_failures+1))
                  fi
                fi
              done

              ARM64_SKIP_MODULES="yara.sh rkhunter.sh aide.sh debsums.sh firejail.sh"
              for script in /usr/lib/hardn-xdr/src/setup/modules/*.sh; do
                if [ -f "$script" ]; then
                  name=$(basename "$script")
                  echo "$PRIORITY_MODULES" | grep -q "$name" && continue
                  if [ "${ARCH}" = "arm64" ] && echo "$ARM64_SKIP_MODULES" | grep -q "$name"; then
                    total_count=$((total_count+1))
                    skip_count=$((skip_count+1))
                    echo "[$total_count] SKIP: $name (ARM64 CI)" | tee -a "$LOG_DIR/modules.log"
                    continue
                  fi
                  total_count=$((total_count+1))
                  echo "[$total_count] Testing: $name" | tee -a "$LOG_DIR/modules.log"
                  if timeout 300 bash "$script" > "$LOG_DIR/$name.log" 2>&1; then
                    echo "[$total_count] PASS: $name" | tee -a "$LOG_DIR/modules.log"
                  else
                    exit_code=$?
                    echo "[$total_count] FAIL: $name (exit code: $exit_code)" | tee -a "$LOG_DIR/modules.log"
                    fail_count=$((fail_count+1))
                  fi
                fi
              done

              if [ -f "/usr/lib/hardn-xdr/hardn_audit.sh" ]; then
                echo "=== Compliance Audit ===" | tee -a "$LOG_DIR/audit.log"
                timeout 300 bash /usr/lib/hardn-xdr/hardn_audit.sh >> "$LOG_DIR/audit.log" 2>&1 || echo "Audit finished with status: $?"
              fi

              echo "=== Summary ===" | tee -a "$LOG_DIR/summary.log"
              echo "Total modules tested: $total_count" | tee -a "$LOG_DIR/summary.log"
              if [ "${ARCH}" = "arm64" ] && [ "$skip_count" -gt 0 ]; then
                echo "Modules skipped (ARM64 CI): $skip_count" | tee -a "$LOG_DIR/summary.log"
                echo "Modules actually tested: $((total_count - skip_count))" | tee -a "$LOG_DIR/summary.log"
              fi
              echo "Total failures: $fail_count" | tee -a "$LOG_DIR/summary.log"
              echo "Critical failures: $critical_failures" | tee -a "$LOG_DIR/summary.log"
            '

      - name: Copy logs and zip
        run: |
          mkdir -p release_assets/hardn-logs-${{ matrix.arch }}-${{ matrix.distro }}-${{ matrix.deployment_type }}
          cp -r ./logbundle/* release_assets/hardn-logs-${{ matrix.arch }}-${{ matrix.distro }}-${{ matrix.deployment_type }}/ || true
          mkdir -p release_assets/hardn-logs-zip
          zip -r release_assets/hardn-logs-zip/hardn_logs_bundle_${{ matrix.arch }}_${{ matrix.distro }}_${{ matrix.deployment_type }}.zip release_assets/hardn-logs-${{ matrix.arch }}-${{ matrix.distro }}-${{ matrix.deployment_type }} || true

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: hardn-logs-zip-${{ matrix.arch }}-${{ matrix.distro }}-${{ matrix.deployment_type }}
          path: release_assets/hardn-logs-zip/hardn_logs_bundle_${{ matrix.arch }}_${{ matrix.distro }}_${{ matrix.deployment_type }}.zip
          if-no-files-found: ignore

  check-deployment-results:
    needs: [build-and-test, test-deployment]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      passed: ${{ steps.check.outputs.passed }}
    steps:
      - name: Check deployment results
        id: check
        run: |
          build_success="${{ needs.build-and-test.result }}"
          if [ "$build_success" = "success" ]; then
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "passed=false" >> $GITHUB_OUTPUT
          fi

  release:
    needs: [build-and-test, check-deployment-results]
    if: needs.check-deployment-results.outputs.passed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download alias .debs
        uses: actions/download-artifact@v5
        with:
          path: release_assets

      - name: Verify presence of logo and assets
        run: |
          test -f docs/hardn.jpg
          test -f release_assets/deb-amd64/hardn_latest_amd64.deb
          test -f release_assets/deb-arm64/hardn_latest_arm64.deb

      - name: Build release notes
        run: |
          tag="${{ needs.build-and-test.outputs.new_tag }}"
          {
            echo "![HARDN-XDR](https://raw.githubusercontent.com/OpenSource-For-Freedom/HARDN-XDR/${tag}/docs/hardn.jpg)"
            echo
            echo "Multi-architecture Debian-only release (AMD64/ARM64)."
            echo
            echo "### Direct latest-download links"
            echo "- amd64: https://github.com/OpenSource-For-Freedom/HARDN-XDR/releases/latest/download/hardn_latest_amd64.deb"
            echo "- arm64: https://github.com/OpenSource-For-Freedom/HARDN-XDR/releases/latest/download/hardn_latest_arm64.deb"
          } > release_notes.md

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="${{ needs.build-and-test.outputs.new_tag }}"
          gh release create "$tag" \
            release_assets/deb-amd64/hardn_latest_amd64.deb \
            release_assets/deb-arm64/hardn_latest_arm64.deb \
            --title "Release $tag" \
            --notes-file release_notes.md