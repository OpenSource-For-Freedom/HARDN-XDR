name: ci

on:
  push:
    branches: ["main", "main-patch"]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch tags
        run: git fetch --tags

      - name: Get latest v1.1.x tag
        id: get_tag
        run: |
          latest_tag=$(git tag -l "v1.1.*" --sort=-v:refname | head -n 1)
          [ -z "$latest_tag" ] && latest_tag="v1.1.0"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Extract patch version and bump
        id: bump
        run: |
          tag="${{ steps.get_tag.outputs.latest_tag }}"
          patch=${tag##*.}
          new_patch=$((patch + 1))
          new_tag="v1.1.$new_patch"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Install deps and tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev debhelper fakeroot build-essential devscripts lintian gnupg whiptail

      - name: Ensure hardn-xdr exists and is executable
        run: |
          if [ ! -f hardn-xdr ]; then
            echo "ERROR: hardn-xdr not found in project root. Build or copy it before packaging."
            exit 1
          fi
          chmod +x hardn-xdr

      - name: Set executable permissions
        run: |
          chmod +x debian/postinst hardn-xdr src/setup/hardn-main.sh
          find src/setup/modules -type f -name "*.sh" -exec chmod +x {} \;

      - name: Update changelog for ${{ matrix.arch }}
        run: |
          raw_tag="${{ steps.bump.outputs.new_tag }}"
          version="${raw_tag#v}"
          export DEBCHANGE_RELEASE_DATE="$(date -R)"
          arch="${{ matrix.arch }}"
          if [ ! -f debian/changelog ]; then touch debian/changelog; fi
          dch --newversion "$version" \
              "Automated release $version for architecture: $arch." \
              --distribution unstable \
              --force-distribution
          dch --release --force-distribution ""

      - name: Build package for ${{ matrix.arch }}
        env:
          DEBIAN_FRONTEND: noninteractive
          SKIP_WHIPTAIL: 1
        run: |
          dpkg-buildpackage -us -uc
          sudo apt install -f -y

      - name: Rename .deb
        id: rename
        run: |
          raw_tag="${{ steps.bump.outputs.new_tag }}"
          version="${raw_tag#v}"
          deb_file=$(ls ../*.deb | head -n 1)
          new_name="hardn_${version}_${{ matrix.arch }}.deb"
          mv "$deb_file" "$new_name"
          echo "deb_file=$new_name" >> $GITHUB_OUTPUT

      - name: Upload .deb
        uses: actions/upload-artifact@v4
        with:
          name: deb-${{ matrix.arch }}
          path: ${{ steps.rename.outputs.deb_file }}

  test-deployment:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Register QEMU emulation
        uses: docker/setup-qemu-action@v3

      - name: Download built .deb for ${{ matrix.arch }}
        uses: actions/download-artifact@v4
        with:
          name: deb-${{ matrix.arch }}
          path: .

      - name: Simulate full HARDN deployment inside container
        id: simulate
        run: |
          echo "Simulating full install for ${{ matrix.arch }}"
          cp hardn_*.deb ./hardn.deb

          docker run --rm -i --platform linux/${{ matrix.arch }} \
            -e SKIP_WHIPTAIL=1 \
            -e DEBIAN_FRONTEND=noninteractive \
            -e CI=true \
            -v "$(pwd)/hardn.deb:/tmp/hardn.deb" \
            debian:stable-slim bash -euxo pipefail -c '
              apt-get update
              apt-get install -y sudo bash gnupg curl whiptail
              dpkg -i /tmp/hardn.deb || true
              apt-get install -f -y
              echo "--- Checking /usr/bin/hardn-xdr ---"
              ls -l /usr/bin/hardn-xdr || echo "hardn-xdr NOT FOUND"
              echo "--- RUNNING HARDN DEPLOYMENT ---"  
              /usr/bin/hardn-xdr || echo "HARDN-XDR exited with code $?"
            ' | tee full-run.log

      - name: Upload full system test log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: full-system-test-${{ matrix.arch }}
          path: ./full-run.log

      - name: Print full output to job log
        if: always()
        run: |
          echo "=== HARDN-XDR Full Output ==="
          cat full-run.log || true

  tag-and-release:
    needs: [build-and-test, test-deployment]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags

      - name: Download all .deb artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Move .deb files to root for release
        run: |
          mkdir -p release
          find . -name "*.deb" -exec mv {} release/ \;

      - name: Set formatted release date
        id: release_date
        run: echo "value=$(date -R)" >> $GITHUB_OUTPUT

      - name: Create and push new tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          tag="${{ needs.build-and-test.outputs.new_tag }}"
          if git rev-parse "$tag" >/dev/null 2>&1; then
            echo "Tag $tag already exists. Skipping tag creation."
          else
            git tag "$tag" -m "Release $tag"
            git push origin "$tag"
          fi

      - name: Create GitHub Release and upload .deb
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build-and-test.outputs.new_tag }}
          name: "Release ${{ needs.build-and-test.outputs.new_tag }}"
          body: |
            ![HARDN-XDR Logo](https://raw.githubusercontent.com/OpenSource-For-Freedom/HARDN-XDR/main/docs/assets/HARDN%20(1).png)

            **HARDN-XDR Automated Release**

            - **Version:** `${{ needs.build-and-test.outputs.new_tag }}`
            - **Architectures:** `amd64`, `arm64`
            - **Timestamp:** ${{ steps.release_date.outputs.value }}

            - All modules tested
            - Deployment verified in container
            - Lintian passed
          files: |
            release/*.deb
