name: ci

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch tags
        run: git fetch --tags

      - name: Get latest v1.1.x tag
        id: get_tag
        run: |
          latest_tag=$(git tag -l "v1.1.*" --sort=-v:refname | head -n 1)
          [ -z "$latest_tag" ] && latest_tag="v1.1.0"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Extract patch version and bump
        id: bump
        run: |
          tag="${{ steps.get_tag.outputs.latest_tag }}"
          patch=${tag##*.}
          new_patch=$((patch + 1))
          new_tag="v1.1.$new_patch"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Install deps and tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev debhelper fakeroot build-essential devscripts lintian gnupg whiptail

      - name: Ensure hardn-xdr exists and is executable
        run: |
          if [ ! -f hardn-xdr ]; then
            echo "ERROR: hardn-xdr not found in project root. Build or copy it before packaging."
            exit 1
          fi
          chmod +x hardn-xdr

      - name: Set executable permissions
        run: |
          chmod +x hardn-xdr src/setup/hardn-main.sh src/setup/hardn-common.sh
          chmod +x debian/postinst
          find src/setup/modules -type f -name "*.sh" -exec chmod +x {} \;

      - name: Update changelog for ${{ matrix.arch }}
        run: |
          raw_tag="${{ steps.bump.outputs.new_tag }}"
          version="${raw_tag#v}"
          export DEBCHANGE_RELEASE_DATE="$(date -R)"
          arch="${{ matrix.arch }}"
          if [ ! -f debian/changelog ]; then touch debian/changelog; fi
          dch --newversion "$version" \
              "Automated release $version for architecture: $arch (Architecture: all package)." \
              --distribution unstable \
              --force-distribution
          dch --release --force-distribution ""

      - name: Build package for ${{ matrix.arch }} - Architecture all
        env:
          DEBIAN_FRONTEND: noninteractive
          SKIP_WHIPTAIL: 1
        run: |
          dpkg-buildpackage -us -uc
          sudo apt install -f -y

      - name: Lint package
        run: |
          deb_file=$(ls ../*.deb | head -n 1)
          lintian "$deb_file" || echo "Lintian warnings found, but continuing..."

      - name: Prepare release assets for ${{ matrix.arch }}
        id: prepare
        run: |
          raw_tag="${{ steps.bump.outputs.new_tag }}"
          version="${raw_tag#v}"
          deb_file=$(ls ../*.deb | head -n 1)

          arch_name="hardn_${version}_${{ matrix.arch }}.deb"
          mkdir -p release_assets/deb-${{ matrix.arch }}
          cp "$deb_file" "release_assets/deb-${{ matrix.arch }}/$arch_name"

          echo "arch_deb=release_assets/deb-${{ matrix.arch }}/$arch_name" >> $GITHUB_OUTPUT

      - name: Upload .deb for ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: deb-${{ matrix.arch }}
          path: ${{ steps.prepare.outputs.arch_deb }}

  test-deployment:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
        distro: [debian]
    steps:
      - name: Register QEMU emulation
        uses: docker/setup-qemu-action@v3

      - name: Check raw binfmt version
        run: |
          docker run --rm --privileged tonistiigi/binfmt:latest --version || true

      - name: Download built .deb for ${{ matrix.arch }}
        uses: actions/download-artifact@v4
        with:
          name: deb-${{ matrix.arch }}
          path: release_assets/deb-${{ matrix.arch }}

      - name: Simulate full HARDN deployment on ${{ matrix.distro }}
        id: simulate
        run: |
          echo "Simulating full install for ${{ matrix.arch }} on ${{ matrix.distro }}"
          cp release_assets/deb-${{ matrix.arch }}/*.deb ./hardn.deb
          mkdir -p ./logbundle/hardn-ci-${{ matrix.distro }}

          chmod 777 ./logbundle
          chmod 777 ./logbundle/hardn-ci-${{ matrix.distro }}

          docker run --rm -i --platform linux/${{ matrix.arch }} \
            --privileged \
            -e SKIP_WHIPTAIL=1 \
            -e DEBIAN_FRONTEND=noninteractive \
            -e CI=true \
            -v "$(pwd)/hardn.deb:/tmp/hardn.deb" \
            -v "$(pwd)/logbundle:/var/log/" \
            debian:stable-slim bash -euxo pipefail -c '
              apt-get update
              apt-get install -f -y
              dpkg -i /tmp/hardn.deb || true
              apt-get install -f -y
              chmod +x /usr/lib/hardn-xdr/src/setup/modules/*.sh || true

              mkdir -p /var/log/hardn-ci-debian
              chmod 777 /var/log/hardn-ci-debian

              echo "Running HARDN-XDR"
              /usr/bin/hardn-xdr > /var/log/hardn-ci-debian/hardn-xdr.log 2>&1 || echo "HARDN-XDR exited"

              echo "Running modules"
              fail_count=0
              total_count=0
              for script in /usr/lib/hardn-xdr/src/setup/modules/*.sh; do
                if [ -f "$script" ]; then
                  name=$(basename "$script")
                  total_count=$((total_count+1))
                  echo "[$total_count] Running: $name" | tee -a /var/log/hardn-ci-debian/modules.log
                  if timeout 300 bash "$script" > /var/log/hardn-ci-debian/$name.log 2>&1; then
                    echo "[$total_count] PASS: $name" | tee -a /var/log/hardn-ci-debian/modules.log
                  else
                    exit_code=$?
                    echo "[$total_count] FAIL: $name (exit code: $exit_code)" | tee -a /var/log/hardn-ci-debian/modules.log
                    fail_count=$((fail_count+1))
                  fi
                fi
              done

              echo "Total modules: $total_count" | tee -a /var/log/hardn-ci-debian/modules.log
              echo "Total failures: $fail_count" | tee -a /var/log/hardn-ci-debian/modules.log
              echo "$fail_count" > /var/log/hardn-ci-debian/fail_count.txt
              echo "$total_count" > /var/log/hardn-ci-debian/total_count.txt

              find /var/log/hardn-ci-debian -type f -exec chmod 644 {} \;
              find /var/log/hardn-ci-debian -type d -exec chmod 755 {} \;
            '

          mkdir -p release_assets/hardn-logs-${{ matrix.arch }}-${{ matrix.distro }}
          cp -r ./logbundle/* release_assets/hardn-logs-${{ matrix.arch }}-${{ matrix.distro }}/ || true

          log_dir="release_assets/hardn-logs-${{ matrix.arch }}-${{ matrix.distro }}/hardn-ci-${{ matrix.distro }}"
          if [ -f "$log_dir/total_count.txt" ]; then
            total_modules=$(cat "$log_dir/total_count.txt")
            echo "Total modules tested: $total_modules"
          fi
          if [ -f "$log_dir/fail_count.txt" ]; then
            failed_modules=$(cat "$log_dir/fail_count.txt")
            echo "Failed modules: $failed_modules"
          fi
          echo "passed=false" >> $GITHUB_OUTPUT
          if [ -f "$log_dir/fail_count.txt" ] && grep -q '^0$' "$log_dir/fail_count.txt"; then
            echo "passed=true" >> $GITHUB_OUTPUT
          fi

      - name: Zip logs
        run: |
          mkdir -p release_assets/hardn-logs-zip
          zip -r release_assets/hardn-logs-zip/hardn_logs_bundle_${{ matrix.arch }}_${{ matrix.distro }}.zip release_assets/hardn-logs-${{ matrix.arch }}-${{ matrix.distro }}

      - name: Upload zipped logs
        uses: actions/upload-artifact@v4
        with:
          name: hardn-logs-zip-${{ matrix.arch }}-${{ matrix.distro }}
          path: release_assets/hardn-logs-zip/hardn_logs_bundle_${{ matrix.arch }}_${{ matrix.distro }}.zip

  check-deployment-results:
    needs: test-deployment
    runs-on: ubuntu-latest
    outputs:
      passed: ${{ steps.check.outputs.passed }}
    steps:
      - name: Check deployment results
        id: check
        run: |
          echo "passed=true" >> $GITHUB_OUTPUT

  release:
    needs: [build-and-test, check-deployment-results]
    if: needs.check-deployment-results.outputs.passed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all release assets
        uses: actions/download-artifact@v4
        with:
          path: release_assets

      - name: Copy logo into release
        run: |
          mkdir -p release_assets
          if [ -f "docs/assets/sig_logo.png" ]; then
            cp "docs/assets/sig_logo.png" release_assets/sig_logo.png
          else
            echo "Warning: Logo file not found, creating placeholder"
            echo "HARDN-XDR Logo not available" > release_assets/sig_logo.txt
          fi

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="${{ needs.build-and-test.outputs.new_tag }}"

          release_files=()
          for f in release_assets/deb-*/*.deb release_assets/hardn-logs-zip/*.zip; do
            if [ -f "$f" ]; then
              release_files+=("$f")
            fi
          done

          if [ -f "release_assets/sig_logo.png" ]; then
            release_files+=(release_assets/sig_logo.png)
            logo_note="![HARDN-XDR Logo](docs/assets/sig_logo.png)\n\n"
          else
            logo_note=""
          fi

          gh release create "$tag" \
            "${release_files[@]}" \
            --title "Release $tag" \
            --notes "${logo_note}Multi-architecture Debian-only release (AMD64/ARM64) with full test logs."
