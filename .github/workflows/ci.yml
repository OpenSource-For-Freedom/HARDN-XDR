name: ci

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
      max-parallel: 1
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup architecture
        run: echo "Building for ${{ matrix.arch }}"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get latest v1.1.x tag
        id: get_tag
        run: |
          latest_tag=$(git tag -l "v1.1.*" --sort=-v:refname | head -n 1)
          [ -z "$latest_tag" ] && latest_tag="v1.1.0"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Extract patch version and bump
        id: bump
        run: |
          tag="${{ steps.get_tag.outputs.latest_tag }}"
          patch=$(echo "$tag" | sed 's/.*\.//')
          new_patch=$((patch + 1))
          new_tag="v1.1.$new_patch"
          echo "new_tag=$new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev debhelper fakeroot build-essential devscripts lintian gnupg whiptail

      - name: Confirm install sources exist
        run: |
          for file in install.sh src/setup/hardn-main.sh hardn-xdr man/hardn-xdr.1; do
            [ -f "$file" ] || { echo "::error ::Missing file: $file"; exit 1; }
          done
          [ -d src/setup/modules ] || { echo "::error ::Missing dir: src/setup/modules"; exit 1; }
          echo "All install targets are present."

      - name: Set executable permissions for packaging
        run: |
          echo "[+] Marking install entry points as executable..."
          chmod +x install.sh || { echo "::error ::install.sh not found or not executable"; exit 1; }
          chmod +x debian/postinst || { echo "::error ::postinst not found or not executable"; exit 1; }
          chmod +x hardn-xdr || { echo "::error ::hardn-xdr not found or not executable"; exit 1; }
          chmod +x src/setup/hardn-main.sh || { echo "::error ::hardn-main.sh not found"; exit 1; }
          find src/setup/modules -type f -name "*.sh" -exec chmod +x {} \;
          echo "[âœ“] Executable permissions set successfully."

      - name: Update changelog with new version
        run: |
          version="${{ steps.bump.outputs.new_tag }}"
          version="${version#v}"
          dch --newversion "$version" "Automated release $version" --distribution unstable --force-distribution
          dch --release --force-distribution ""

      - name: Build Debian package
        run: |
          export DEB_BUILD_ARCH=${{ matrix.arch }}
          dpkg-buildpackage -us -uc
          sudo apt install -f

      - name: Inspect built .deb contents
        run: |
          deb=$(ls ../*.deb | head -n 1)
          echo "Package contents of $deb:"
          dpkg-deb -c "$deb"

      - name: Rename and move .deb
        id: rename
        run: |
          version="${{ steps.bump.outputs.new_tag }}"
          version="${version#v}"  # strip 'v'
          arch="${{ matrix.arch }}"
          deb_file=$(ls ../*.deb | head -n 1)
          [ ! -f "$deb_file" ] && echo "::error ::No .deb file found." && exit 1
          new_name="hardn_${version}_${arch}.deb"
          mv "$deb_file" "./$new_name"
          echo "deb_file=$new_name" >> $GITHUB_OUTPUT

      - name: Validate package with lintian
        run: |
          set -e
          echo "Validating with lintian..."
          lintian --fail-on error --info --display-info hardn_*.deb

      - name: Upload .deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-${{ matrix.arch }}
          path: ${{ steps.rename.outputs.deb_file }}

      - name: Run test container with .deb
        run: |
          docker run --rm \
          -e SKIP_WHIPTAIL=1 \
          -v "$(pwd)/${{ steps.rename.outputs.deb_file }}:/tmp/hardn.deb" \
          debian:stable-slim bash -c '
          set -euo pipefail
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y sudo gnupg
          dpkg -i /tmp/hardn.deb || true
          apt-get install -f -y
          dpkg --configure -a
          echo "--- Installed Package Contents ---"
          dpkg -L hardn-xdr || true
          echo "--- Running hardn-xdr ---"
          sudo SKIP_WHIPTAIL=1 hardn-xdr || echo "hardn-xdr run failed"
          cat /tmp/postinst.log || echo "No postinst log found"
          ' | tee hardn-execution.log

      - name: Upload test log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: hardn-test-log-${{ matrix.arch }}
          path: hardn-execution.log

  tag-and-release:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags

      - name: Update changelog with new version
        run: |
          export DEBFULLNAME="Tim Burns"
          export DEBEMAIL="cyborgcreations01@gmail.com"
          version="${{ steps.bump.outputs.new_tag }}"
          version="${version#v}"
          now=$(date -R)  # RFC-2822 format like: Sun, 06 Jul 2025 12:45:00 -0400
          dch --newversion "$version" "Automated release $version" --distribution unstable --force-distribution --date "$now"
          dch --release --force-distribution ""

      - name: Commit updated changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add debian/changelog
          git commit -m "chore: update debian changelog for ${{ needs.build-and-test.outputs.new_tag }}" || echo "No changes to commit"
          git push origin main

      - name: Download amd64 artifact
        uses: actions/download-artifact@v4
        with:
          name: deb-amd64
          path: .

      - name: Download arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: deb-arm64
          path: .

      - name: Create and push new tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          tag="${{ needs.build-and-test.outputs.new_tag }}"
          if git rev-parse "$tag" >/dev/null 2>&1; then
            echo "Tag already exists, skipping"
          else
            git tag "$tag" -m "Release $tag"
            git push origin "$tag"
          fi

      - name: Create GitHub Release and upload .deb
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build-and-test.outputs.new_tag }}
          name: "Release ${{ needs.build-and-test.outputs.new_tag }}"
          body: "Automated release for version ${{ needs.build-and-test.outputs.new_tag }}"
          files: ./hardn_*.deb