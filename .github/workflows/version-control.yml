name: Build and Release Debian Package

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write
  statuses: write
  checks: write
  deployments: write
  discussions: write

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04, debian-12]
        arch: [amd64, arm64]
    runs-on: ${{ matrix.os }}

    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}
      deb_out: ${{ steps.rename.outputs.deb_out }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get latest v1.1.x tag
        id: get_tag
        run: |
          latest_tag=$(git tag -l "v1.1.*" --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            latest_tag="v1.1.0"
          fi
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Extract patch version and bump
        id: bump
        run: |
          tag="${{ steps.get_tag.outputs.latest_tag }}"
          patch=$(echo "$tag" | sed 's/.*\.//')
          new_patch=$((patch + 1))
          new_tag="v1.1.$new_patch"
          echo "new_tag=$new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y dpkg-dev debhelper fakeroot build-essential devscripts lintian gnupg

      - name: Build Debian package
        run: |
          export DEB_BUILD_ARCH=${{ matrix.arch }}
          dpkg-buildpackage -us -uc

      - name: Rename .deb to include arch and version
        id: rename
        run: |
          full_tag="${{ steps.bump.outputs.new_tag }}"
          version="${full_tag#v}"
          arch="${{ matrix.arch }}"
          deb_file=$(ls ../*.deb | head -n 1)
          new_name="hardn_${version}_${arch}.deb"
          mv "$deb_file" "../$new_name"
          echo "deb_out=../$new_name" >> $GITHUB_OUTPUT


      - name: Test install of .deb and execution
        run: |
          sudo apt-get update
          sudo dpkg -i ./$(basename ${{ steps.rename.outputs.deb_out }}) || sudo apt-get install -f -y
          # Test apt-get install using the local .deb for dependency resolution
          sudo apt-get install -y ./$(basename ${{ steps.rename.outputs.deb_out }})
          echo "Verifying 'hardn-xdr' command"
          sudo hardn-xdr --version || (echo "Execution failed" && exit 1)
          dpkg -L hardn | tee installed_files.txt

      - name: Upload test logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: deb-install-debug
          path: installed_files.txt

  tag-and-release:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch all tags
        run: git fetch --tags

      - name: Create and push new tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "${{ needs.build-and-test.outputs.new_tag }}" -m "Release ${{ needs.build-and-test.outputs.new_tag }}"
          git push origin "${{ needs.build-and-test.outputs.new_tag }}"

      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build-and-test.outputs.new_tag }}
          name: "Release ${{ needs.build-and-test.outputs.new_tag }}"
          body: "Automated release for version ${{ needs.build-and-test.outputs.new_tag }}"
          files: ${{ needs.build-and-test.outputs.deb_out }}
