name: Build and Release Debian Package

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write
  statuses: write
  checks: write
  deployments: write
  discussions: write

jobs:
  bump-version:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Get latest v1.1.x tag
        id: get_tag
        run: |
          latest_tag=$(git tag -l "v1.1.*" --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            # If no v1.1.x tag exists, start from v1.1.0
            latest_tag="v1.1.0"
          fi
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Extract patch version and bump
        id: bump
        run: |
          tag="${{ steps.get_tag.outputs.latest_tag }}"
          # Extract the part after the last dot
          patch=$(echo "$tag" | sed 's/.*\.//')
          # Increment the patch version
          new_patch=$((patch + 1))
          # Construct the new tag
          new_tag="v1.1.$new_patch"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Create and push new tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "${{ steps.bump.outputs.new_tag }}" -m "Release ${{ steps.bump.outputs.new_tag }}"
          git push origin "${{ steps.bump.outputs.new_tag }}"

  build-and-release:
    needs: bump-version
    runs-on: ubuntu-latest
    permissions:
      contents: write 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
         
          ref: ${{ needs.bump-version.outputs.new_tag }}

      - name: Install build dependencies

        run: sudo apt-get update && sudo apt-get install -y dpkg-dev debhelper fakeroot build-essential devscripts

      - name: Build Debian package
        run: dpkg-buildpackage -us -uc

      - name: Find package name
        id: find_package
        run: |
          # The .deb file is created in the parent directory
          pkg_path=$(ls ../*.deb)
          echo "pkg_path=$pkg_path" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.bump-version.outputs.new_tag }}
          name: "Release ${{ needs.bump-version.outputs.new_tag }}"
          body: "Automated release for version ${{ needs.bump-version.outputs.new_tag }}"
          files: "${{ steps.find_package.outputs.pkg_path }}"
